
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import javafx.util.Pair;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\036\002" +
    "\000\002\037\002\000\002\003\012\000\002\040\002\000" +
    "\002\041\002\000\002\003\011\000\002\042\002\000\002" +
    "\043\002\000\002\003\013\000\002\044\002\000\002\045" +
    "\002\000\002\046\002\000\002\003\016\000\002\003\003" +
    "\000\002\003\007\000\002\047\002\000\002\003\006\000" +
    "\002\026\003\000\002\026\005\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\006\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\050\002\000\002\004\005\000\002\004\004\000" +
    "\002\020\003\000\002\020\006\000\002\017\005\000\002" +
    "\051\002\000\002\017\011\000\002\017\007\000\002\052" +
    "\002\000\002\021\006\000\002\053\002\000\002\021\011" +
    "\000\002\054\002\000\002\021\013\000\002\023\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\006\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\005\000\002\011\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\055\002\000\002\056\002\000" +
    "\002\012\011\000\002\057\002\000\002\012\006\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\004" +
    "\000\002\060\002\000\002\030\006\000\002\061\002\000" +
    "\002\030\006\000\002\030\005\000\002\062\002\000\002" +
    "\063\002\000\002\013\013\000\002\064\002\000\002\065" +
    "\002\000\002\013\013\000\002\066\002\000\002\013\011" +
    "\000\002\022\003\000\002\022\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\015\005\000\002\015\003\000\002\014\004\000\002\014" +
    "\002\000\002\033\003\000\002\035\003\000\002\034\003" +
    "\000\002\005\003\000\002\024\003\000\002\025\003\000" +
    "\002\006\004\000\002\006\002\000\002\032\003\000\002" +
    "\031\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\056\002\ufffe\004\012\005\024\006\023\010" +
    "\016\012\007\013\022\015\041\016\034\033\005\042\040" +
    "\043\042\044\011\045\037\046\033\047\010\050\026\051" +
    "\014\052\025\053\017\064\032\065\013\001\002\000\062" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\033\uffef\042\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\064\uffef\065\uffef\001\002\000\040" +
    "\006\023\012\007\033\005\042\040\043\042\044\011\045" +
    "\037\046\033\047\010\050\026\051\014\052\025\053\017" +
    "\064\032\065\013\001\002\000\004\006\315\001\002\000" +
    "\110\005\uffe4\007\uffe4\011\uffe4\017\uffe4\021\277\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\302\027\uffe4\030\uffe4\031" +
    "\301\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\101" +
    "\067\071\070\100\071\073\001\002\000\006\007\uff9e\012" +
    "\uff9e\001\002\000\102\005\uffcb\007\uffcb\011\uffcb\017\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\027\uffcb\030\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\001\002\000\004\006\uff8c\001\002\000" +
    "\040\006\023\012\007\033\005\042\040\043\042\044\011" +
    "\045\037\046\033\047\010\050\026\051\014\052\025\053" +
    "\017\064\032\065\013\001\002\000\006\007\uff9c\012\uff9c" +
    "\001\002\000\054\004\ufff6\005\ufff6\006\ufff6\010\ufff6\012" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\033\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\064\ufff6\065\ufff6\001\002\000\056\004\uffed" +
    "\005\uffed\006\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015" +
    "\uffed\016\uffed\033\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\064" +
    "\uffed\065\uffed\001\002\000\040\006\023\012\007\033\005" +
    "\042\040\043\042\044\011\045\037\046\033\047\010\050" +
    "\026\051\014\052\025\053\017\064\032\065\013\001\002" +
    "\000\010\037\151\054\150\055\153\001\002\000\050\017" +
    "\261\032\107\033\065\034\075\035\103\036\064\041\102" +
    "\056\074\057\105\060\066\061\076\062\067\063\106\064" +
    "\104\065\070\066\101\067\071\070\100\071\073\001\002" +
    "\000\004\006\uff93\001\002\000\040\006\023\012\007\033" +
    "\005\042\040\043\042\044\011\045\037\046\033\047\010" +
    "\050\026\051\014\052\025\053\017\064\032\065\013\001" +
    "\002\000\054\004\uff8e\005\uff8e\006\uff8e\010\uff8e\012\uff8e" +
    "\013\uff8e\015\uff8e\016\uff8e\033\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\064\uff8e\065\uff8e\001\002\000\006\007\uff9b\012" +
    "\uff9b\001\002\000\006\007\uff9d\012\uff9d\001\002\000\102" +
    "\005\uffe9\007\uffe9\011\uffe9\017\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\001" +
    "\002\000\102\005\uffe2\007\uffe2\011\uffe2\017\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\071\uffe2\001\002\000\060\002\000\004\000\005\000\006" +
    "\000\010\000\011\000\012\000\013\000\015\000\016\000" +
    "\033\000\042\000\043\000\044\000\045\000\046\000\047" +
    "\000\050\000\051\000\052\000\053\000\064\000\065\000" +
    "\001\002\000\040\006\023\012\007\033\005\042\040\043" +
    "\042\044\011\045\037\046\033\047\010\050\026\051\014" +
    "\052\025\053\017\064\032\065\013\001\002\000\102\005" +
    "\uffc9\007\uffc9\011\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\001\002" +
    "\000\004\006\247\001\002\000\102\005\uffe3\007\uffe3\011" +
    "\uffe3\017\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\001\002\000\056\002\245" +
    "\004\012\005\024\006\023\010\016\012\007\013\022\015" +
    "\041\016\034\033\005\042\040\043\042\044\011\045\037" +
    "\046\033\047\010\050\026\051\014\052\025\053\017\064" +
    "\032\065\013\001\002\000\102\005\uffca\007\uffca\011\uffca" +
    "\017\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027\uffca\030" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\071\uffca\001\002\000\102\005\uffcd\007" +
    "\uffcd\011\uffcd\017\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\001\002\000\040" +
    "\006\uff8d\012\uff8d\033\uff8d\042\uff8d\043\uff8d\044\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\064\uff8d\065\uff8d\001\002\000\102\005\uffce\007\uffce\011" +
    "\uffce\017\uffce\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce" +
    "\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\067\uffce\070\uffce\071\uffce\001\002\000\040\006\170" +
    "\012\007\033\005\042\040\043\042\044\011\045\037\046" +
    "\033\047\010\050\026\051\014\052\025\053\017\064\032" +
    "\065\013\001\002\000\004\006\ufff9\001\002\000\004\012" +
    "\uffe1\001\002\000\102\005\uffe8\007\uffe8\011\uffe8\017\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\001\002\000\004\012\051\001\002\000" +
    "\102\005\uffe0\007\uffe0\011\uffe0\017\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0" +
    "\001\002\000\106\005\uffde\007\uffde\011\uffde\017\uffde\021" +
    "\uffd8\022\uffde\023\uffde\024\uffde\025\uffde\026\060\027\uffde" +
    "\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\071\uffde\001\002\000\102\005\uffd1" +
    "\007\uffd1\011\uffd1\017\uffd1\022\056\023\uffd1\024\uffd1\025" +
    "\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\001\002\000" +
    "\102\005\uffcf\007\uffcf\011\uffcf\017\uffcf\022\054\023\uffcf" +
    "\024\uffcf\025\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\001\002\000\004\012\051\001\002\000\102\005\uffd0\007" +
    "\uffd0\011\uffd0\017\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000\004" +
    "\012\051\001\002\000\102\005\uffd2\007\uffd2\011\uffd2\017" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\001\002\000\040\006\023\012\007" +
    "\033\005\042\040\043\042\044\011\045\037\046\033\047" +
    "\010\050\026\051\014\052\025\053\017\064\032\065\013" +
    "\001\002\000\004\021\062\001\002\000\040\006\023\012" +
    "\007\033\005\042\040\043\042\044\011\045\037\046\033" +
    "\047\010\050\026\051\014\052\025\053\017\064\032\065" +
    "\013\001\002\000\102\005\uffd7\007\uffd7\011\uffd7\017\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\032" +
    "\107\033\065\034\075\035\103\036\064\037\uffd7\040\uffd7" +
    "\041\102\054\uffd7\055\uffd7\056\074\057\105\060\066\061" +
    "\076\062\067\063\106\064\104\065\070\066\101\067\071" +
    "\070\100\071\073\001\002\000\040\006\023\012\007\033" +
    "\005\042\040\043\042\044\011\045\037\046\033\047\010" +
    "\050\026\051\014\052\025\053\017\064\032\065\013\001" +
    "\002\000\040\006\023\012\007\033\005\042\040\043\042" +
    "\044\011\045\037\046\033\047\010\050\026\051\014\052" +
    "\025\053\017\064\032\065\013\001\002\000\040\006\023" +
    "\012\007\033\005\042\040\043\042\044\011\045\037\046" +
    "\033\047\010\050\026\051\014\052\025\053\017\064\032" +
    "\065\013\001\002\000\040\006\023\012\007\033\005\042" +
    "\040\043\042\044\011\045\037\046\033\047\010\050\026" +
    "\051\014\052\025\053\017\064\032\065\013\001\002\000" +
    "\102\005\uffc5\007\uffc5\011\uffc5\017\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\001\002\000\040\006\uffc1\012\uffc1\033\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\064\uffc1\065\uffc1\001\002\000\040\006" +
    "\uffb6\012\uffb6\033\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\064" +
    "\uffb6\065\uffb6\001\002\000\040\006\uffbf\012\uffbf\033\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\064\uffbf\065\uffbf\001\002" +
    "\000\040\006\023\012\007\033\005\042\040\043\042\044" +
    "\011\045\037\046\033\047\010\050\026\051\014\052\025" +
    "\053\017\064\032\065\013\001\002\000\040\006\023\012" +
    "\007\033\005\042\040\043\042\044\011\045\037\046\033" +
    "\047\010\050\026\051\014\052\025\053\017\064\032\065" +
    "\013\001\002\000\040\006\023\012\007\033\005\042\040" +
    "\043\042\044\011\045\037\046\033\047\010\050\026\051" +
    "\014\052\025\053\017\064\032\065\013\001\002\000\040" +
    "\006\023\012\007\033\005\042\040\043\042\044\011\045" +
    "\037\046\033\047\010\050\026\051\014\052\025\053\017" +
    "\064\032\065\013\001\002\000\040\006\uffc0\012\uffc0\033" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\064\uffc0\065\uffc0\001" +
    "\002\000\040\006\uffc2\012\uffc2\033\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\064\uffc2\065\uffc2\001\002\000\040\006\uff91" +
    "\012\uff91\033\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\064\uff91" +
    "\065\uff91\001\002\000\040\006\023\012\007\033\005\042" +
    "\040\043\042\044\011\045\037\046\033\047\010\050\026" +
    "\051\014\052\025\053\017\064\032\065\013\001\002\000" +
    "\102\005\uffc6\007\uffc6\011\uffc6\017\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\001\002\000\040\006\023\012\007\033\005\042\040\043" +
    "\042\044\011\045\037\046\033\047\010\050\026\051\014" +
    "\052\025\053\017\064\032\065\013\001\002\000\040\006" +
    "\023\012\007\033\005\042\040\043\042\044\011\045\037" +
    "\046\033\047\010\050\026\051\014\052\025\053\017\064" +
    "\032\065\013\001\002\000\040\006\023\012\007\033\005" +
    "\042\040\043\042\044\011\045\037\046\033\047\010\050" +
    "\026\051\014\052\025\053\017\064\032\065\013\001\002" +
    "\000\102\005\uffbe\007\uffbe\011\uffbe\017\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe" +
    "\034\075\035\103\036\064\037\uffbe\040\uffbe\041\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\104\065\070\066\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\001\002\000\060\007\uffb4\017\uffb4\032\107\033\065" +
    "\034\075\035\103\036\064\037\uffb4\041\102\054\uffb4\055" +
    "\uffb4\056\074\057\105\060\066\061\076\062\067\063\106" +
    "\064\104\065\070\066\101\067\071\070\100\071\073\001" +
    "\002\000\060\007\uffaf\017\uffaf\032\107\033\065\034\075" +
    "\035\103\036\064\037\uffaf\041\102\054\uffaf\055\uffaf\056" +
    "\074\057\105\060\066\061\076\062\067\063\106\064\104" +
    "\065\070\066\101\067\071\070\100\071\073\001\002\000" +
    "\102\005\uffbb\007\uffbb\011\uffbb\017\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\104\065\070\066\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\001\002\000\102\005\uffc3\007\uffc3\011\uffc3\017\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\032\107" +
    "\033\065\034\075\035\103\036\064\037\uffc3\040\uffc3\041" +
    "\102\054\uffc3\055\uffc3\056\074\057\105\060\066\061\076" +
    "\062\067\063\106\064\104\065\070\066\101\067\071\070" +
    "\100\071\073\001\002\000\060\007\uffb1\017\uffb1\032\107" +
    "\033\065\034\075\035\103\036\064\037\uffb1\041\102\054" +
    "\uffb1\055\uffb1\056\074\057\105\060\066\061\076\062\067" +
    "\063\106\064\104\065\070\066\101\067\071\070\100\071" +
    "\073\001\002\000\102\005\uffbc\007\uffbc\011\uffbc\017\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\104\065\070\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\001\002\000\060\007\uffb0\017\uffb0\032" +
    "\107\033\065\034\075\035\103\036\064\037\uffb0\041\102" +
    "\054\uffb0\055\uffb0\056\074\057\105\060\066\061\076\062" +
    "\067\063\106\064\104\065\070\066\101\067\071\070\100" +
    "\071\073\001\002\000\040\006\023\012\007\033\005\042" +
    "\040\043\042\044\011\045\037\046\033\047\010\050\026" +
    "\051\014\052\025\053\017\064\032\065\013\001\002\000" +
    "\102\005\uffb5\007\uffb5\011\uffb5\017\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\027\uffb5\030\uffb5\032\107\033\065\034" +
    "\075\035\103\036\064\037\uffb5\040\uffb5\041\102\054\uffb5" +
    "\055\uffb5\056\074\057\105\060\066\061\076\062\067\063" +
    "\106\064\104\065\070\066\101\067\071\070\100\071\073" +
    "\001\002\000\060\007\uffb3\017\uffb3\032\107\033\065\034" +
    "\075\035\103\036\064\037\uffb3\041\102\054\uffb3\055\uffb3" +
    "\056\074\057\105\060\066\061\076\062\067\063\106\064" +
    "\104\065\070\066\101\067\071\070\100\071\073\001\002" +
    "\000\060\007\uffb2\017\uffb2\032\107\033\065\034\075\035" +
    "\103\036\064\037\uffb2\041\102\054\uffb2\055\uffb2\056\074" +
    "\057\105\060\066\061\076\062\067\063\106\064\104\065" +
    "\070\066\101\067\071\070\100\071\073\001\002\000\102" +
    "\005\uffbd\007\uffbd\011\uffbd\017\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\075" +
    "\035\103\036\064\037\uffbd\040\uffbd\041\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\104\065\070\066\uffbd\067\uffbd\070\uffbd\071\uffbd\001" +
    "\002\000\102\005\uffba\007\uffba\011\uffba\017\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\104\065\070\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\001\002\000\050\027\127\032\107\033\065\034" +
    "\075\035\103\036\064\041\102\056\074\057\105\060\066" +
    "\061\076\062\067\063\106\064\104\065\070\066\101\067" +
    "\071\070\100\071\073\001\002\000\104\005\uffdd\007\uffdd" +
    "\011\uffdd\017\uffdd\021\130\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\001\002\000" +
    "\004\010\uffd4\001\002\000\004\021\132\001\002\000\040" +
    "\006\023\012\007\033\005\042\040\043\042\044\011\045" +
    "\037\046\033\047\010\050\026\051\014\052\025\053\017" +
    "\064\032\065\013\001\002\000\102\005\uffd5\007\uffd5\011" +
    "\uffd5\017\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5" +
    "\030\uffd5\032\107\033\065\034\075\035\103\036\064\037" +
    "\uffd5\040\uffd5\041\102\054\uffd5\055\uffd5\056\074\057\105" +
    "\060\066\061\076\062\067\063\106\064\104\065\070\066" +
    "\101\067\071\070\100\071\073\001\002\000\004\010\135" +
    "\001\002\000\040\006\023\012\007\033\005\042\040\043" +
    "\042\044\011\045\037\046\033\047\010\050\026\051\014" +
    "\052\025\053\017\064\032\065\013\001\002\000\052\011" +
    "\uff99\022\141\032\107\033\065\034\075\035\103\036\064" +
    "\041\102\056\074\057\105\060\066\061\076\062\067\063" +
    "\106\064\104\065\070\066\101\067\071\070\100\071\073" +
    "\001\002\000\004\011\140\001\002\000\102\005\uffd3\007" +
    "\uffd3\011\uffd3\017\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\027\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\001\002\000\040" +
    "\006\023\012\007\033\005\042\040\043\042\044\011\045" +
    "\037\046\033\047\010\050\026\051\014\052\025\053\017" +
    "\064\032\065\013\001\002\000\004\011\uff9a\001\002\000" +
    "\004\006\144\001\002\000\040\006\023\012\007\033\005" +
    "\042\040\043\042\044\011\045\037\046\033\047\010\050" +
    "\026\051\014\052\025\053\017\064\032\065\013\001\002" +
    "\000\012\007\ufff8\037\151\054\150\055\153\001\002\000" +
    "\046\032\107\033\065\034\075\035\103\036\064\041\102" +
    "\056\074\057\105\060\066\061\076\062\067\063\106\064" +
    "\104\065\070\066\101\067\071\070\100\071\073\001\002" +
    "\000\004\007\165\001\002\000\040\006\uffad\012\uffad\033" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\064\uffad\065\uffad\001" +
    "\002\000\040\006\uff92\012\uff92\033\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\064\uff92\065\uff92\001\002\000\040\006\uffb9" +
    "\012\uffb9\033\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\064\uffb9" +
    "\065\uffb9\001\002\000\040\006\uffab\012\uffab\033\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\064\uffab\065\uffab\001\002\000" +
    "\040\006\023\012\007\033\005\042\040\043\042\044\011" +
    "\045\037\046\033\047\010\050\026\051\014\052\025\053" +
    "\017\064\032\065\013\001\002\000\014\007\uffaa\017\uffaa" +
    "\037\uffaa\054\150\055\uffaa\001\002\000\040\006\023\012" +
    "\007\033\005\042\040\043\042\044\011\045\037\046\033" +
    "\047\010\050\026\051\014\052\025\053\017\064\032\065" +
    "\013\001\002\000\050\032\107\033\065\034\075\035\103" +
    "\036\064\040\160\041\102\056\074\057\105\060\066\061" +
    "\076\062\067\063\106\064\104\065\070\066\101\067\071" +
    "\070\100\071\073\001\002\000\040\006\uffb8\012\uffb8\033" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\064\uffb8\065\uffb8\001" +
    "\002\000\040\006\023\012\007\033\005\042\040\043\042" +
    "\044\011\045\037\046\033\047\010\050\026\051\014\052" +
    "\025\053\017\064\032\065\013\001\002\000\102\005\uffb7" +
    "\007\uffb7\011\uffb7\017\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\027\uffb7\030\uffb7\032\107\033\065\034\075\035\103" +
    "\036\064\037\uffb7\040\uffb7\041\102\054\uffb7\055\uffb7\056" +
    "\074\057\105\060\066\061\076\062\067\063\106\064\104" +
    "\065\070\066\101\067\071\070\100\071\073\001\002\000" +
    "\040\006\023\012\007\033\005\042\040\043\042\044\011" +
    "\045\037\046\033\047\010\050\026\051\014\052\025\053" +
    "\017\064\032\065\013\001\002\000\014\007\uffac\017\uffac" +
    "\037\uffac\054\uffac\055\uffac\001\002\000\054\004\012\005" +
    "\024\006\023\010\016\012\007\013\022\015\041\016\034" +
    "\033\005\042\040\043\042\044\011\045\037\046\033\047" +
    "\010\050\026\051\014\052\025\053\017\064\032\065\013" +
    "\001\002\000\062\002\ufff7\004\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\033\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\064\ufff7\065\ufff7" +
    "\001\002\000\054\023\215\024\213\030\212\032\107\033" +
    "\065\034\075\035\103\036\064\041\102\056\074\057\105" +
    "\060\066\061\076\062\067\063\106\064\104\065\070\066" +
    "\101\067\071\070\100\071\073\001\002\000\040\006\023" +
    "\012\007\033\005\042\040\043\042\044\011\045\037\046" +
    "\033\047\010\050\026\051\014\052\025\053\017\064\032" +
    "\065\013\001\002\000\012\007\210\037\151\054\150\055" +
    "\153\001\002\000\052\007\176\017\ufff3\032\107\033\065" +
    "\034\075\035\103\036\064\041\102\056\074\057\105\060" +
    "\066\061\076\062\067\063\106\064\104\065\070\066\101" +
    "\067\071\070\100\071\073\001\002\000\006\007\174\012" +
    "\uffe1\001\002\000\040\006\023\012\007\033\005\042\040" +
    "\043\042\044\011\045\037\046\033\047\010\050\026\051" +
    "\014\052\025\053\017\064\032\065\013\001\002\000\102" +
    "\005\uffe5\007\uffe5\011\uffe5\017\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\001" +
    "\002\000\102\005\uffe7\007\uffe7\011\uffe7\017\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\071\uffe7\001\002\000\004\017\200\001\002\000\040\006" +
    "\023\012\007\033\005\042\040\043\042\044\011\045\037" +
    "\046\033\047\010\050\026\051\014\052\025\053\017\064" +
    "\032\065\013\001\002\000\012\017\ufff2\037\151\054\150" +
    "\055\153\001\002\000\004\017\203\001\002\000\040\006" +
    "\023\012\007\033\005\042\040\043\042\044\011\045\037" +
    "\046\033\047\010\050\026\051\014\052\025\053\017\064" +
    "\032\065\013\001\002\000\050\007\ufff1\032\107\033\065" +
    "\034\075\035\103\036\064\041\102\056\074\057\105\060" +
    "\066\061\076\062\067\063\106\064\104\065\070\066\101" +
    "\067\071\070\100\071\073\001\002\000\004\007\206\001" +
    "\002\000\054\004\012\005\024\006\023\010\016\012\007" +
    "\013\022\015\041\016\034\033\005\042\040\043\042\044" +
    "\011\045\037\046\033\047\010\050\026\051\014\052\025" +
    "\053\017\064\032\065\013\001\002\000\062\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\033\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\064\ufff0\065\ufff0\001\002\000\014\007\uffa9\017" +
    "\uffa9\037\uffa9\054\uffa9\055\uffa9\001\002\000\040\006\023" +
    "\012\007\033\005\042\040\043\042\044\011\045\037\046" +
    "\033\047\010\050\026\051\014\052\025\053\017\064\032" +
    "\065\013\001\002\000\042\006\uff95\010\uff95\012\uff95\033" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\064\uff95\065\uff95\001" +
    "\002\000\040\006\uff94\012\uff94\033\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\053\uff94\064\uff94\065\uff94\001\002\000\040\006\023" +
    "\012\007\033\005\042\040\043\042\044\011\045\037\046" +
    "\033\047\010\050\026\051\014\052\025\053\017\064\032" +
    "\065\013\001\002\000\040\006\uff96\012\uff96\033\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\064\uff96\065\uff96\001\002\000" +
    "\042\006\023\010\217\012\007\033\005\042\040\043\042" +
    "\044\011\045\037\046\033\047\010\050\026\051\014\052" +
    "\025\053\017\064\032\065\013\001\002\000\040\006\023" +
    "\012\007\033\005\042\040\043\042\044\011\045\037\046" +
    "\033\047\010\050\026\051\014\052\025\053\017\064\032" +
    "\065\013\001\002\000\004\005\uffa2\001\002\000\050\005" +
    "\uffa0\032\107\033\065\034\075\035\103\036\064\041\102" +
    "\056\074\057\105\060\066\061\076\062\067\063\106\064" +
    "\104\065\070\066\101\067\071\070\100\071\073\001\002" +
    "\000\004\005\223\001\002\000\054\004\012\005\024\006" +
    "\023\010\016\012\007\013\022\015\041\016\034\033\005" +
    "\042\040\043\042\044\011\045\037\046\033\047\010\050" +
    "\026\051\014\052\025\053\017\064\032\065\013\001\002" +
    "\000\062\002\uffa1\004\uffa1\005\uffa1\006\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\033\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\064\uffa1\065\uffa1\001\002" +
    "\000\004\011\226\001\002\000\004\005\uff9f\001\002\000" +
    "\052\005\uffa8\025\uffa8\032\107\033\065\034\075\035\103" +
    "\036\064\041\102\056\074\057\105\060\066\061\076\062" +
    "\067\063\106\064\104\065\070\066\101\067\071\070\100" +
    "\071\073\001\002\000\006\005\uff97\025\231\001\002\000" +
    "\040\006\023\012\007\033\005\042\040\043\042\044\011" +
    "\045\037\046\033\047\010\050\026\051\014\052\025\053" +
    "\017\064\032\065\013\001\002\000\004\005\233\001\002" +
    "\000\054\004\uffa7\005\uffa7\006\uffa7\010\uffa7\012\uffa7\013" +
    "\uffa7\015\uffa7\016\uffa7\033\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\064\uffa7\065\uffa7\001\002\000\054\004\012\005\024" +
    "\006\023\010\016\012\007\013\022\015\041\016\034\033" +
    "\005\042\040\043\042\044\011\045\037\046\033\047\010" +
    "\050\026\051\014\052\025\053\017\064\032\065\013\001" +
    "\002\000\062\002\uffa6\004\uffa6\005\uffa6\006\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\033" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\064\uffa6\065\uffa6\001" +
    "\002\000\050\005\uff98\032\107\033\065\034\075\035\103" +
    "\036\064\041\102\056\074\057\105\060\066\061\076\062" +
    "\067\063\106\064\104\065\070\066\101\067\071\070\100" +
    "\071\073\001\002\000\052\005\uffa5\025\uffa5\032\107\033" +
    "\065\034\075\035\103\036\064\041\102\056\074\057\105" +
    "\060\066\061\076\062\067\063\106\064\104\065\070\066" +
    "\101\067\071\070\100\071\073\001\002\000\006\005\uff97" +
    "\025\231\001\002\000\004\005\242\001\002\000\054\004" +
    "\uffa4\005\uffa4\006\uffa4\010\uffa4\012\uffa4\013\uffa4\015\uffa4" +
    "\016\uffa4\033\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\064\uffa4" +
    "\065\uffa4\001\002\000\054\004\012\005\024\006\023\010" +
    "\016\012\007\013\022\015\041\016\034\033\005\042\040" +
    "\043\042\044\011\045\037\046\033\047\010\050\026\051" +
    "\014\052\025\053\017\064\032\065\013\001\002\000\062" +
    "\002\uffa3\004\uffa3\005\uffa3\006\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\033\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\064\uffa3\065\uffa3\001\002\000\004" +
    "\002\001\001\002\000\060\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\015\uffff\016\uffff" +
    "\033\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\064\uffff\065\uffff" +
    "\001\002\000\042\006\023\010\250\012\007\033\005\042" +
    "\040\043\042\044\011\045\037\046\033\047\010\050\026" +
    "\051\014\052\025\053\017\064\032\065\013\001\002\000" +
    "\040\006\023\012\007\033\005\042\040\043\042\044\011" +
    "\045\037\046\033\047\010\050\026\051\014\052\025\053" +
    "\017\064\032\065\013\001\002\000\050\007\uffeb\032\107" +
    "\033\065\034\075\035\103\036\064\041\102\056\074\057" +
    "\105\060\066\061\076\062\067\063\106\064\104\065\070" +
    "\066\101\067\071\070\100\071\073\001\002\000\004\007" +
    "\253\001\002\000\004\017\254\001\002\000\062\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\033\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\064\uffee\065\uffee\001\002\000\004\011\256" +
    "\001\002\000\004\007\uffea\001\002\000\102\005\uffc8\007" +
    "\uffc8\011\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\001\002\000\050" +
    "\007\176\032\107\033\065\034\075\035\103\036\064\041" +
    "\102\056\074\057\105\060\066\061\076\062\067\063\106" +
    "\064\104\065\070\066\101\067\071\070\100\071\073\001" +
    "\002\000\062\002\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\033" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\064\ufffd\065\ufffd\001" +
    "\002\000\014\007\uffae\017\uffae\037\uffae\054\uffae\055\uffae" +
    "\001\002\000\056\004\012\005\024\006\023\010\016\011" +
    "\ufffe\012\007\013\022\015\041\016\034\033\005\042\040" +
    "\043\042\044\011\045\037\046\033\047\010\050\026\051" +
    "\014\052\025\053\017\064\032\065\013\001\002\000\056" +
    "\004\012\005\024\006\023\010\016\011\265\012\007\013" +
    "\022\015\041\016\034\033\005\042\040\043\042\044\011" +
    "\045\037\046\033\047\010\050\026\051\014\052\025\053" +
    "\017\064\032\065\013\001\002\000\062\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\033\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053" +
    "\uffec\064\uffec\065\uffec\001\002\000\054\004\012\005\024" +
    "\006\023\010\016\012\007\013\022\015\041\016\034\033" +
    "\005\042\040\043\042\044\011\045\037\046\033\047\010" +
    "\050\026\051\014\052\025\053\017\064\032\065\013\001" +
    "\002\000\004\004\270\001\002\000\004\006\271\001\002" +
    "\000\040\006\023\012\007\033\005\042\040\043\042\044" +
    "\011\045\037\046\033\047\010\050\026\051\014\052\025" +
    "\053\017\064\032\065\013\001\002\000\012\007\273\037" +
    "\151\054\150\055\153\001\002\000\004\017\ufff5\001\002" +
    "\000\004\017\275\001\002\000\062\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\033\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\064\ufff4\065\ufff4\001\002\000\102\005\uffc7\007\uffc7\011" +
    "\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7" +
    "\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002\000\042\006\023" +
    "\010\311\012\007\033\005\042\040\043\042\044\011\045" +
    "\037\046\033\047\010\050\026\051\014\052\025\053\017" +
    "\064\032\065\013\001\002\000\040\006\023\012\007\033" +
    "\005\042\040\043\042\044\011\045\037\046\033\047\010" +
    "\050\026\051\014\052\025\053\017\064\032\065\013\001" +
    "\002\000\102\005\uffdf\007\uffdf\011\uffdf\017\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf" +
    "\071\uffdf\001\002\000\040\006\023\012\007\033\005\042" +
    "\040\043\042\044\011\045\037\046\033\047\010\050\026" +
    "\051\014\052\025\053\017\064\032\065\013\001\002\000" +
    "\050\027\304\032\107\033\065\034\075\035\103\036\064" +
    "\041\102\056\074\057\105\060\066\061\076\062\067\063" +
    "\106\064\104\065\070\066\101\067\071\070\100\071\073" +
    "\001\002\000\104\005\uffcc\007\uffcc\011\uffcc\017\uffcc\021" +
    "\305\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\070\uffcc\071\uffcc\001\002\000\040\006\uffdb\012\uffdb" +
    "\033\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\064\uffdb\065\uffdb" +
    "\001\002\000\040\006\023\012\007\033\005\042\040\043" +
    "\042\044\011\045\037\046\033\047\010\050\026\051\014" +
    "\052\025\053\017\064\032\065\013\001\002\000\102\005" +
    "\uffda\007\uffda\011\uffda\017\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\030\uffda\032\107\033\065\034\075\035" +
    "\103\036\064\037\uffda\040\uffda\041\102\054\uffda\055\uffda" +
    "\056\074\057\105\060\066\061\076\062\067\063\106\064" +
    "\104\065\070\066\101\067\071\070\100\071\073\001\002" +
    "\000\102\005\uffc4\007\uffc4\011\uffc4\017\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\032\107\033\065" +
    "\034\075\035\103\036\064\037\uffc4\040\uffc4\041\102\054" +
    "\uffc4\055\uffc4\056\074\057\105\060\066\061\076\062\067" +
    "\063\106\064\104\065\070\066\101\067\071\070\100\071" +
    "\073\001\002\000\040\006\023\012\007\033\005\042\040" +
    "\043\042\044\011\045\037\046\033\047\010\050\026\051" +
    "\014\052\025\053\017\064\032\065\013\001\002\000\102" +
    "\005\uffdc\007\uffdc\011\uffdc\017\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\027\uffdc\030\uffdc\032\107\033\065\034\075" +
    "\035\103\036\064\037\uffdc\040\uffdc\041\102\054\uffdc\055" +
    "\uffdc\056\074\057\105\060\066\061\076\062\067\063\106" +
    "\064\104\065\070\066\101\067\071\070\100\071\073\001" +
    "\002\000\004\011\314\001\002\000\102\005\uffd9\007\uffd9" +
    "\011\uffd9\017\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\040\006" +
    "\023\012\007\033\005\042\040\043\042\044\011\045\037" +
    "\046\033\047\010\050\026\051\014\052\025\053\017\064" +
    "\032\065\013\001\002\000\012\007\ufffc\037\151\054\150" +
    "\055\153\001\002\000\004\007\320\001\002\000\054\004" +
    "\012\005\024\006\023\010\016\012\007\013\022\015\041" +
    "\016\034\033\005\042\040\043\042\044\011\045\037\046" +
    "\033\047\010\050\026\051\014\052\025\053\017\064\032" +
    "\065\013\001\002\000\062\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\033\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\064\ufffb" +
    "\065\ufffb\001\002\000\062\002\uff8f\004\uff8f\005\uff8f\006" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\323\015\uff8f" +
    "\016\uff8f\033\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\064\uff8f" +
    "\065\uff8f\001\002\000\054\004\012\005\024\006\023\010" +
    "\016\012\007\013\022\015\041\016\034\033\005\042\040" +
    "\043\042\044\011\045\037\046\033\047\010\050\026\051" +
    "\014\052\025\053\017\064\032\065\013\001\002\000\062" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\033\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\064\ufffa\065\ufffa\001\002\000\062" +
    "\002\uff90\004\uff90\005\uff90\006\uff90\010\uff90\011\uff90\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\016\uff90\033\uff90\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\064\uff90\065\uff90\001\002\000\102" +
    "\005\uffe6\007\uffe6\011\uffe6\017\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034\075" +
    "\035\103\036\064\037\uffe6\040\uffe6\041\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\104\065\070\066\uffe6\067\uffe6\070\uffe6\071\uffe6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\036\002\035\003\030\004\020\005\005\007" +
    "\043\010\044\011\045\012\026\013\003\016\027\017\034" +
    "\030\017\031\042\032\014\001\001\000\002\001\001\000" +
    "\020\004\325\010\044\011\045\012\026\016\027\017\034" +
    "\030\017\001\001\000\002\001\001\000\004\027\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\275\010\044\011\045\012\026\016\027\017" +
    "\034\030\017\001\001\000\002\001\001\000\004\042\265" +
    "\001\001\000\004\047\262\001\001\000\020\004\145\010" +
    "\044\011\045\012\026\016\027\017\034\030\261\001\001" +
    "\000\004\024\151\001\001\000\006\025\071\027\076\001" +
    "\001\000\002\001\001\000\020\004\257\010\172\011\045" +
    "\012\026\016\027\017\034\030\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\256\010" +
    "\044\011\045\012\026\016\027\017\034\030\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\245\004\020\005\005\007\043\010\044\011\045" +
    "\012\026\013\003\016\027\017\034\030\017\031\042\032" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\166\010\044\011" +
    "\045\012\026\016\027\017\034\030\017\001\001\000\004" +
    "\040\142\001\001\000\004\050\046\001\001\000\002\001" +
    "\001\000\010\020\051\021\052\023\047\001\001\000\002" +
    "\001\001\000\004\052\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\051\021\052\023\054\001\001" +
    "\000\002\001\001\000\010\020\051\021\052\023\056\001" +
    "\001\000\002\001\001\000\020\004\125\010\044\011\045" +
    "\012\026\016\027\017\034\030\017\001\001\000\002\001" +
    "\001\000\020\004\062\010\044\011\045\012\026\016\027" +
    "\017\034\030\017\001\001\000\006\025\071\027\076\001" +
    "\001\000\020\004\124\010\044\011\045\012\026\016\027" +
    "\017\034\030\017\001\001\000\020\004\123\010\044\011" +
    "\045\012\026\016\027\017\034\030\017\001\001\000\020" +
    "\004\122\010\044\011\045\012\026\016\027\017\034\030" +
    "\017\001\001\000\020\004\121\010\044\011\045\012\026" +
    "\016\027\017\034\030\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\117\001\001\000\002\001\001" +
    "\000\020\004\116\010\044\011\045\012\026\016\027\017" +
    "\034\030\017\001\001\000\020\004\115\010\044\011\045" +
    "\012\026\016\027\017\034\030\017\001\001\000\020\004" +
    "\114\010\044\011\045\012\026\016\027\017\034\030\017" +
    "\001\001\000\020\004\113\010\044\011\045\012\026\016" +
    "\027\017\034\030\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\112\010\044\011" +
    "\045\012\026\016\027\017\034\030\017\001\001\000\002" +
    "\001\001\000\020\004\111\010\044\011\045\012\026\016" +
    "\027\017\034\030\017\001\001\000\020\004\110\010\044" +
    "\011\045\012\026\016\027\017\034\030\017\001\001\000" +
    "\020\004\107\010\044\011\045\012\026\016\027\017\034" +
    "\030\017\001\001\000\006\025\071\027\076\001\001\000" +
    "\006\025\071\027\076\001\001\000\006\025\071\027\076" +
    "\001\001\000\006\025\071\027\076\001\001\000\006\025" +
    "\071\027\076\001\001\000\006\025\071\027\076\001\001" +
    "\000\006\025\071\027\076\001\001\000\006\025\071\027" +
    "\076\001\001\000\020\004\120\010\044\011\045\012\026" +
    "\016\027\017\034\030\017\001\001\000\006\025\071\027" +
    "\076\001\001\000\006\025\071\027\076\001\001\000\006" +
    "\025\071\027\076\001\001\000\006\025\071\027\076\001" +
    "\001\000\006\025\071\027\076\001\001\000\006\025\071" +
    "\027\076\001\001\000\004\053\130\001\001\000\004\054" +
    "\133\001\001\000\002\001\001\000\020\004\132\010\044" +
    "\011\045\012\026\016\027\017\034\030\017\001\001\000" +
    "\006\025\071\027\076\001\001\000\002\001\001\000\022" +
    "\004\135\010\044\011\045\012\026\015\136\016\027\017" +
    "\034\030\017\001\001\000\006\025\071\027\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\135\010" +
    "\044\011\045\012\026\015\141\016\027\017\034\030\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\145\010\044\011\045\012\026\016\027\017\034\030\144" +
    "\001\001\000\006\024\151\041\146\001\001\000\006\025" +
    "\071\027\076\001\001\000\002\001\001\000\004\060\162" +
    "\001\001\000\002\001\001\000\004\055\155\001\001\000" +
    "\004\061\153\001\001\000\020\004\145\010\044\011\045" +
    "\012\026\016\027\017\034\030\154\001\001\000\004\024" +
    "\151\001\001\000\020\004\156\010\044\011\045\012\026" +
    "\016\027\017\034\030\017\001\001\000\006\025\071\027" +
    "\076\001\001\000\004\056\160\001\001\000\020\004\161" +
    "\010\044\011\045\012\026\016\027\017\034\030\017\001" +
    "\001\000\006\025\071\027\076\001\001\000\020\004\145" +
    "\010\044\011\045\012\026\016\027\017\034\030\163\001" +
    "\001\000\004\024\151\001\001\000\034\003\165\004\020" +
    "\005\005\007\043\010\044\011\045\012\026\013\003\016" +
    "\027\017\034\030\017\031\042\032\014\001\001\000\002" +
    "\001\001\000\014\025\071\027\076\033\213\034\210\035" +
    "\215\001\001\000\020\004\171\010\172\011\045\012\026" +
    "\016\027\017\034\030\170\001\001\000\004\024\151\001" +
    "\001\000\010\025\071\027\076\044\176\001\001\000\004" +
    "\050\046\001\001\000\020\004\174\010\044\011\045\012" +
    "\026\016\027\017\034\030\017\001\001\000\006\025\071" +
    "\027\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\145\010\044\011\045\012\026\016\027\017\034" +
    "\030\200\001\001\000\006\024\151\045\201\001\001\000" +
    "\002\001\001\000\020\004\203\010\044\011\045\012\026" +
    "\016\027\017\034\030\017\001\001\000\010\025\071\027" +
    "\076\046\204\001\001\000\002\001\001\000\034\003\206" +
    "\004\020\005\005\007\043\010\044\011\045\012\026\013" +
    "\003\016\027\017\034\030\017\031\042\032\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\236\010" +
    "\044\011\045\012\026\016\027\017\034\030\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\226\010" +
    "\044\011\045\012\026\016\027\017\034\030\017\001\001" +
    "\000\002\001\001\000\022\004\220\010\044\011\045\012" +
    "\026\016\027\017\034\022\217\030\017\001\001\000\022" +
    "\004\135\010\044\011\045\012\026\015\224\016\027\017" +
    "\034\030\017\001\001\000\004\066\221\001\001\000\006" +
    "\025\071\027\076\001\001\000\002\001\001\000\034\003" +
    "\223\004\020\005\005\007\043\010\044\011\045\012\026" +
    "\013\003\016\027\017\034\030\017\031\042\032\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\071\027\076\062\227\001\001\000\004\014" +
    "\231\001\001\000\020\004\235\010\044\011\045\012\026" +
    "\016\027\017\034\030\017\001\001\000\002\001\001\000" +
    "\004\063\233\001\001\000\034\003\234\004\020\005\005" +
    "\007\043\010\044\011\045\012\026\013\003\016\027\017" +
    "\034\030\017\031\042\032\014\001\001\000\002\001\001" +
    "\000\006\025\071\027\076\001\001\000\010\025\071\027" +
    "\076\064\237\001\001\000\004\014\240\001\001\000\002" +
    "\001\001\000\004\065\242\001\001\000\034\003\243\004" +
    "\020\005\005\007\043\010\044\011\045\012\026\013\003" +
    "\016\027\017\034\030\017\031\042\032\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\250\010\044\011\045\012\026\016\027\017\034\026" +
    "\251\030\017\001\001\000\022\004\135\010\044\011\045" +
    "\012\026\015\254\016\027\017\034\030\017\001\001\000" +
    "\006\025\071\027\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\071\027\076\001\001\000\006\025\071" +
    "\027\076\001\001\000\002\001\001\000\004\024\151\001" +
    "\001\000\036\002\263\003\030\004\020\005\005\007\043" +
    "\010\044\011\045\012\026\013\003\016\027\017\034\030" +
    "\017\031\042\032\014\001\001\000\034\003\245\004\020" +
    "\005\005\007\043\010\044\011\045\012\026\013\003\016" +
    "\027\017\034\030\017\031\042\032\014\001\001\000\002" +
    "\001\001\000\034\003\266\004\020\005\005\007\043\010" +
    "\044\011\045\012\026\013\003\016\027\017\034\030\017" +
    "\031\042\032\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\145\010\044\011\045\012\026\016\027" +
    "\017\034\030\271\001\001\000\004\024\151\001\001\000" +
    "\004\043\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\071\027\076\001\001\000\020\004\311\010" +
    "\044\011\045\012\026\016\027\017\034\030\017\001\001" +
    "\000\020\004\307\010\044\011\045\012\026\016\027\017" +
    "\034\030\017\001\001\000\002\001\001\000\020\004\302" +
    "\010\044\011\045\012\026\016\027\017\034\030\017\001" +
    "\001\000\006\025\071\027\076\001\001\000\002\001\001" +
    "\000\004\051\305\001\001\000\020\004\306\010\044\011" +
    "\045\012\026\016\027\017\034\030\017\001\001\000\006" +
    "\025\071\027\076\001\001\000\006\025\071\027\076\001" +
    "\001\000\022\004\135\010\044\011\045\012\026\015\312" +
    "\016\027\017\034\030\017\001\001\000\006\025\071\027" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\145\010\044\011\045\012\026\016\027\017\034\030" +
    "\315\001\001\000\006\024\151\036\316\001\001\000\002" +
    "\001\001\000\034\003\320\004\020\005\005\007\043\010" +
    "\044\011\045\012\026\013\003\016\027\017\034\030\017" +
    "\031\042\032\014\001\001\000\004\037\321\001\001\000" +
    "\004\006\323\001\001\000\034\003\324\004\020\005\005" +
    "\007\043\010\044\011\045\012\026\013\003\016\027\017" +
    "\034\030\017\031\042\032\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\071\027\076\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String uID = "";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Lista_de_Sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Lista_de_Sent ::= Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_Sent ::= Lista_de_Sent Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_Sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, iff); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= prIF AP Condicion NT$0 CP Sentencia NT$1 prELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.salida(Generator.LABEL, null, null, iff);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, whilee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= prWHILE NT$2 AP Condicion NT$3 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, whilee); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              String RESULT =null;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, doo.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c.v()); Generator.salida(Generator.GOTO, null, null, doo.v()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= prDO NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Generator.salida(Generator.LABEL, null, null, forr.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= prFOR AP Expresion NT$6 PYC Condicion NT$7 PYC Expresion NT$8 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= prFORTO 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= PRINT AP prPRINT CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.salida(sym.PRINT, null, null, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
TablaSimbolos.anadirNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= ALL NT$9 Lista_de_Sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TablaSimbolos.quitarNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prPRINT ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prPRINT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // prPRINT ::= ALL prArray CLL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.nuevaTemp(); String[] array = p.split(" "); TablaSimbolos.putRegistro(temp,TablaSimbolos.tipoValor(array[0])); TablaSimbolos.put(temp + ":" + array.length, TablaSimbolos.tipoValor(array[0])); for(int i = 0; i < array.length; i++) {Generator.salida(sym.IDENT, array[i],null, temp + ":" + i);}  RESULT = temp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prPRINT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= Operador 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= Incr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MINUS, e, null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= AP Ids CP Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.CAST, i, e, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.comprobacionRango(e.split(":")); RESULT = Generator.salida(Generator.OBJETO, e, null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= Asignacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= Valor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$10 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
uID = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= Ids NT$10 prDeclaracion 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= IDENT LENGTH 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = TablaSimbolos.getMatriz(i).split(":")[1]; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declaracion ::= IDENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; TablaSimbolos.put(RESULT, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Declaracion ::= IDENT ACOR Expresion CCOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = id + ":" + e; TablaSimbolos.put(RESULT, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asignacion ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e, null, i); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$11 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
String array = i+":"+e; Generator.comprobacionRango(array.split(":"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Asignacion ::= IDENT ACOR Expresion CCOR IGUAL NT$11 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e2, null, i+":"+e); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignacion ::= IDENT IGUAL ALL prArray CLL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.nuevaTemp(); String[] array = p.split(" "); TablaSimbolos.putRegistro(temp,TablaSimbolos.tipoValor(array[0])); TablaSimbolos.put(temp + ":" + array.length, TablaSimbolos.tipoValor(array[0])); for(int i = 0; i < array.length; i++) {Generator.salida(sym.IDENT, array[i],null, temp + ":" + i);}  RESULT = Generator.salida(Generator.ASIG, temp, null, id); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$12 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = e1; TablaSimbolos.put(RESULT, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DeclAsig ::= IDENT NT$12 IGUAL Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e, null, e1); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclAsig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$13 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
String array = id + ":" + e1; TablaSimbolos.put(array, uID); Generator.comprobacionRango(array.split(":"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DeclAsig ::= IDENT ACOR Expresion CCOR NT$13 IGUAL Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e2, null, id+":"+e1); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclAsig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$14 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
String array = id + ":" + e; TablaSimbolos.put(array, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DeclAsig ::= IDENT ACOR Expresion CCOR IGUAL NT$14 ALL prArray CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.nuevaTemp(); String[] array = p.split(" "); TablaSimbolos.putRegistro(temp,TablaSimbolos.tipoValor(array[0])); TablaSimbolos.put(temp + ":" + array.length, TablaSimbolos.tipoValor(array[0])); for(int i = 0; i < array.length; i++) {Generator.salida(sym.IDENT, array[i],null, temp + ":" + i);}  RESULT = Generator.salida(Generator.ASIG, temp, null, id); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclAsig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // prDeclaracion ::= Declaracion COMA prDeclaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // prDeclaracion ::= Declaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // prDeclaracion ::= DeclAsig COMA prDeclaracion 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prDeclaracion ::= DeclAsig 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Valor ::= REAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Valor ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Valor ::= IDENT ACOR Expresion CCOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String array = i+":"+e; Generator.comprobacionRango(array.split(":")); String temp = Generator.nuevaTemp(); Generator.salida(sym.IDENT, array, null, temp); RESULT = temp; TablaSimbolos.putRegistro(temp, TablaSimbolos.getTipo(i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Valor ::= LETRA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Valor ::= UNICODE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "'"+(char)Integer.parseInt(e, 16)+"'"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Valor ::= TEXTO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Incr ::= MASMAS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = TablaSimbolos.getConcat(e); Generator.salida(sym.MASMAS, null, null, RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Incr ::= MENOSMENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = TablaSimbolos.getConcat(e); Generator.salida(sym.MENOSMENOS, null, null, RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Incr ::= Expresion MASMAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, TablaSimbolos.getTipo(e)); Generator.salida(sym.IDENT, TablaSimbolos.getConcat(e), null, RESULT); Generator.salida(sym.MASMAS, null, null, TablaSimbolos.getConcat(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Incr ::= Expresion MENOSMENOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, TablaSimbolos.getTipo(e)); Generator.salida(sym.IDENT, TablaSimbolos.getConcat(e), null, RESULT); Generator.salida(sym.MENOSMENOS, null, null, TablaSimbolos.getConcat(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Incr ::= IDENT OperadorIGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(o, i, e, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Incr ::= Expresion OperadorIGUAL Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("#ERROR: Expresion en incrementos"); RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperadorIGUAL ::= MASIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.MASIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperadorIGUAL ::= MENOSIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.MENOSIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperadorIGUAL ::= PORIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.PORIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorIGUAL ::= DIVIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.DIVIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MAS, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MENOS, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.POR, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.DIV, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MOD, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$15 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, "int"); Generator.salida(sym.IDENT, e1, null, RESULT); Generator.salida(Generator.GOTO, null, null, p); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Operador ::= Condicion prIGACION NT$15 Expresion DOSPUN NT$16 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(sym.IDENT, e2, null, RESULT); Generator.salida(Generator.LABEL, null, null, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$17 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, "int"); Generator.salida(sym.IDENT, e1, null, RESULT); Generator.salida(Generator.IFGOTO, e1+" != ", "0", p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operador ::= Expresion prELVIS NT$17 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(sym.IDENT, e2, null, RESULT); Generator.salida(Generator.LABEL, null, null, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Condicion ::= Expresion EQ Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condicion ::= Expresion NE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Condicion ::= Expresion LT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Condicion ::= Expresion LE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Condicion ::= Expresion GT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condicion ::= Expresion GE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condicion ::= NOT Condicion 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.swap(); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$18 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condicion ::= Condicion AND NT$18 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.f()); Generator.salida(Generator.GOTO, null, null, c2.f()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$19 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Condicion ::= Condicion OR NT$19 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.v()); Generator.salida(Generator.GOTO, null, null, c2.v()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condicion ::= AP Condicion CP 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$20 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(Generator.IFGOTO, e2+" < ", e1, c.f()); Generator.salida(Generator.GOTO, null, null, c.v()); Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$21 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(sym.MAS, e1 + TablaSimbolos.get(e1), s, e1 + TablaSimbolos.get(e1)); Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // prFORTO ::= prFOR Expresion prTO Expresion NT$20 prSTEP DO NT$21 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$22 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(Generator.IFGOTO, e1+" < ", e2, c.f()); Generator.salida(Generator.GOTO, null, null, c.v()); Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$23 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(sym.MENOS, e1 + TablaSimbolos.get(e1), s, e1 + TablaSimbolos.get(e1)); Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // prFORTO ::= prFOR Expresion prDOWNTO Expresion NT$22 prSTEP DO NT$23 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$24 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (TablaSimbolos.operacionReal(e1, e2) == 1 ||TablaSimbolos.operacionReal(e1, e2) == 2) System.out.println("#ERROR: Valor indice no coincide"); String i = Generator.nuevaTemp(); TablaSimbolos.putRegistro(i, "int"); Generator.salida(Generator.ASIG, "-1", null, i); Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(sym.MASMAS, null, null, i); if (TablaSimbolos.getMatriz(e2).split(":").length<2){System.out.println("#ERROR: Array no detectado");} else { Generator.salida(Generator.IFGOTO, i+" < ", TablaSimbolos.getMatriz(e2).split(":")[1], forr.f()); }Generator.salida(Generator.GOTO, null, null, c.f()); Generator.salida(Generator.LABEL, null, null, forr.f()); Generator.salida(sym.IDENT, e2+":"+i, null, e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // prFORTO ::= prFOR Expresion prIN prFORIN NT$24 DO Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.f()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // prFORIN ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORIN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // prFORIN ::= ALL prArray CLL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.nuevaTemp(); String[] array = p.split(" "); TablaSimbolos.putRegistro(temp,TablaSimbolos.tipoValor(array[0])); TablaSimbolos.put(temp + ":" + array.length, TablaSimbolos.tipoValor(array[0])); for(int i = 0; i < array.length; i++) {Generator.salida(sym.IDENT, array[i],null, temp + ":" + i);}  RESULT = temp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORIN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Ids ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; uID = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Ids ::= FLOAT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; uID = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Ids ::= CHAR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; uID = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Ids ::= STRING 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; uID = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // prArray ::= Expresion COMA prArray 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e + " " + l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // prArray ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // prSTEP ::= STEP Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSTEP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // prSTEP ::= 
            {
              String RESULT =null;
		RESULT = "1";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSTEP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // prTO ::= TO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prTO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // prIN ::= IN 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // prDOWNTO ::= DOWNTO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDOWNTO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // prIF ::= IF 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // prIGACION ::= IGACION 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIGACION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // prELVIS ::= ELVIS 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELVIS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // prELSE ::= ELSE Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // prELSE ::= 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // prDO ::= DO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // prFOR ::= FOR 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // prWHILE ::= WHILE 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWHILE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
