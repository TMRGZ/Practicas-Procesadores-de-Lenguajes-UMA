
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 07 19:46:36 GMT 2019
//----------------------------------------------------

import java_cup.runtime.*;
import javafx.util.Pair;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Arrays;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 07 19:46:36 GMT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\035\002" +
    "\000\002\036\002\000\002\003\012\000\002\037\002\000" +
    "\002\040\002\000\002\003\011\000\002\041\002\000\002" +
    "\042\002\000\002\003\013\000\002\043\002\000\002\044" +
    "\002\000\002\045\002\000\002\003\016\000\002\003\003" +
    "\000\002\003\007\000\002\046\002\000\002\003\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\004\000\002\004\006\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\047\002\000\002\004\005" +
    "\000\002\020\003\000\002\020\006\000\002\017\005\000" +
    "\002\050\002\000\002\017\011\000\002\017\007\000\002" +
    "\051\002\000\002\021\006\000\002\052\002\000\002\021" +
    "\011\000\002\053\002\000\002\021\013\000\002\023\005" +
    "\000\002\023\003\000\002\023\005\000\002\023\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\006\000\002" +
    "\016\003\000\002\016\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\005" +
    "\000\002\011\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\054\002\000\002\055\002\000\002\012\011" +
    "\000\002\056\002\000\002\012\006\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\004\000\002\057" +
    "\002\000\002\027\006\000\002\060\002\000\002\027\006" +
    "\000\002\027\005\000\002\061\002\000\002\062\002\000" +
    "\002\013\013\000\002\063\002\000\002\064\002\000\002" +
    "\013\013\000\002\065\002\000\002\013\011\000\002\022" +
    "\003\000\002\022\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\015\005\000\002\015\003\000" +
    "\002\014\004\000\002\014\002\000\002\032\003\000\002" +
    "\034\003\000\002\033\003\000\002\005\003\000\002\024" +
    "\003\000\002\025\003\000\002\006\004\000\002\006\002" +
    "\000\002\031\003\000\002\030\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\052\002\ufffe\004\013\005\024\006\023\010" +
    "\016\012\007\013\022\015\037\016\032\032\005\041\036" +
    "\042\040\043\011\044\035\045\010\046\026\047\014\050" +
    "\017\061\031\062\012\001\002\000\056\002\uffef\004\uffef" +
    "\005\uffef\006\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\032\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\061\uffef\062" +
    "\uffef\001\002\000\034\006\023\012\007\032\005\041\036" +
    "\042\040\043\011\044\035\045\010\046\026\047\014\050" +
    "\017\061\031\062\012\001\002\000\004\006\306\001\002" +
    "\000\106\005\uffe6\007\uffe6\011\uffe6\017\uffe6\021\271\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\273\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\066\064" +
    "\056\065\065\066\060\001\002\000\006\007\uffa2\012\uffa2" +
    "\001\002\000\102\005\uffce\007\uffce\011\uffce\017\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\066\uffce\001\002\000\034\006\023\012\007\032\005" +
    "\041\036\042\040\043\011\044\035\045\010\046\026\047" +
    "\014\050\017\061\031\062\012\001\002\000\004\006\uff91" +
    "\001\002\000\006\007\uffa0\012\uffa0\001\002\000\050\004" +
    "\ufff6\005\ufff6\006\ufff6\010\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\016\ufff6\032\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\061\ufff6\062\ufff6\001\002" +
    "\000\052\004\uffed\005\uffed\006\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\032\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\061" +
    "\uffed\062\uffed\001\002\000\034\006\023\012\007\032\005" +
    "\041\036\042\040\043\011\044\035\045\010\046\026\047" +
    "\014\050\017\061\031\062\012\001\002\000\010\036\115" +
    "\051\114\052\117\001\002\000\050\017\253\031\074\032" +
    "\052\033\063\034\070\035\051\040\067\053\061\054\072" +
    "\055\054\056\062\057\053\060\073\061\071\062\055\063" +
    "\066\064\056\065\065\066\060\001\002\000\004\006\uff98" +
    "\001\002\000\034\006\023\012\007\032\005\041\036\042" +
    "\040\043\011\044\035\045\010\046\026\047\014\050\017" +
    "\061\031\062\012\001\002\000\050\004\uff93\005\uff93\006" +
    "\uff93\010\uff93\012\uff93\013\uff93\015\uff93\016\uff93\032\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\061\uff93\062\uff93\001\002\000\102\005\uffeb" +
    "\007\uffeb\011\uffeb\017\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\001\002\000" +
    "\006\007\uffa1\012\uffa1\001\002\000\102\005\uffe4\007\uffe4" +
    "\011\uffe4\017\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\001\002\000\054\002" +
    "\000\004\000\005\000\006\000\010\000\011\000\012\000" +
    "\013\000\015\000\016\000\032\000\041\000\042\000\043" +
    "\000\044\000\045\000\046\000\047\000\050\000\061\000" +
    "\062\000\001\002\000\034\006\023\012\007\032\005\041" +
    "\036\042\040\043\011\044\035\045\010\046\026\047\014" +
    "\050\017\061\031\062\012\001\002\000\004\006\245\001" +
    "\002\000\102\005\uffe5\007\uffe5\011\uffe5\017\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\001\002\000\052\002\243\004\013\005\024\006" +
    "\023\010\016\012\007\013\022\015\037\016\032\032\005" +
    "\041\036\042\040\043\011\044\035\045\010\046\026\047" +
    "\014\050\017\061\031\062\012\001\002\000\102\005\uffcd" +
    "\007\uffcd\011\uffcd\017\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\001\002\000" +
    "\102\005\uffd0\007\uffd0\011\uffd0\017\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\001\002\000\034\006\uff92\012\uff92\032\uff92\041\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\061\uff92\062\uff92\001\002\000\102\005\uffd1\007\uffd1\011" +
    "\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002\000\034\006\166" +
    "\012\007\032\005\041\036\042\040\043\011\044\035\045" +
    "\010\046\026\047\014\050\017\061\031\062\012\001\002" +
    "\000\004\012\uffe3\001\002\000\004\006\ufff9\001\002\000" +
    "\102\005\uffea\007\uffea\011\uffea\017\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\001\002\000\004\006\046\001\002\000\034\006\023\012" +
    "\007\032\005\041\036\042\040\043\011\044\035\045\010" +
    "\046\026\047\014\050\017\061\031\062\012\001\002\000" +
    "\012\007\ufff8\036\115\051\114\052\117\001\002\000\046" +
    "\031\074\032\052\033\063\034\070\035\051\040\067\053" +
    "\061\054\072\055\054\056\062\057\053\060\073\061\071" +
    "\062\055\063\066\064\056\065\065\066\060\001\002\000" +
    "\034\006\023\012\007\032\005\041\036\042\040\043\011" +
    "\044\035\045\010\046\026\047\014\050\017\061\031\062" +
    "\012\001\002\000\034\006\023\012\007\032\005\041\036" +
    "\042\040\043\011\044\035\045\010\046\026\047\014\050" +
    "\017\061\031\062\012\001\002\000\034\006\023\012\007" +
    "\032\005\041\036\042\040\043\011\044\035\045\010\046" +
    "\026\047\014\050\017\061\031\062\012\001\002\000\034" +
    "\006\023\012\007\032\005\041\036\042\040\043\011\044" +
    "\035\045\010\046\026\047\014\050\017\061\031\062\012" +
    "\001\002\000\102\005\uffc9\007\uffc9\011\uffc9\017\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\034\006\uffc5\012\uffc5\032\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\061\uffc5\062\uffc5\001\002\000\034\006\uffba" +
    "\012\uffba\032\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\061\uffba\062\uffba\001\002" +
    "\000\034\006\uffc3\012\uffc3\032\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\061\uffc3" +
    "\062\uffc3\001\002\000\034\006\023\012\007\032\005\041" +
    "\036\042\040\043\011\044\035\045\010\046\026\047\014" +
    "\050\017\061\031\062\012\001\002\000\034\006\023\012" +
    "\007\032\005\041\036\042\040\043\011\044\035\045\010" +
    "\046\026\047\014\050\017\061\031\062\012\001\002\000" +
    "\034\006\023\012\007\032\005\041\036\042\040\043\011" +
    "\044\035\045\010\046\026\047\014\050\017\061\031\062" +
    "\012\001\002\000\034\006\023\012\007\032\005\041\036" +
    "\042\040\043\011\044\035\045\010\046\026\047\014\050" +
    "\017\061\031\062\012\001\002\000\034\006\uffc4\012\uffc4" +
    "\032\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\061\uffc4\062\uffc4\001\002\000\034" +
    "\006\uffc6\012\uffc6\032\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\061\uffc6\062\uffc6" +
    "\001\002\000\034\006\uff96\012\uff96\032\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\061\uff96\062\uff96\001\002\000\034\006\023\012\007\032" +
    "\005\041\036\042\040\043\011\044\035\045\010\046\026" +
    "\047\014\050\017\061\031\062\012\001\002\000\102\005" +
    "\uffca\007\uffca\011\uffca\017\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002" +
    "\000\034\006\023\012\007\032\005\041\036\042\040\043" +
    "\011\044\035\045\010\046\026\047\014\050\017\061\031" +
    "\062\012\001\002\000\034\006\023\012\007\032\005\041" +
    "\036\042\040\043\011\044\035\045\010\046\026\047\014" +
    "\050\017\061\031\062\012\001\002\000\034\006\023\012" +
    "\007\032\005\041\036\042\040\043\011\044\035\045\010" +
    "\046\026\047\014\050\017\061\031\062\012\001\002\000" +
    "\102\005\uffc2\007\uffc2\011\uffc2\017\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\063\034\070\035\051\036\uffc2\037\uffc2\040\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\071\062\055\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\001\002\000\060\007\uffb8\017\uffb8\031\074\032\052\033" +
    "\063\034\070\035\051\036\uffb8\040\067\051\uffb8\052\uffb8" +
    "\053\061\054\072\055\054\056\062\057\053\060\073\061" +
    "\071\062\055\063\066\064\056\065\065\066\060\001\002" +
    "\000\060\007\uffb3\017\uffb3\031\074\032\052\033\063\034" +
    "\070\035\051\036\uffb3\040\067\051\uffb3\052\uffb3\053\061" +
    "\054\072\055\054\056\062\057\053\060\073\061\071\062" +
    "\055\063\066\064\056\065\065\066\060\001\002\000\102" +
    "\005\uffbf\007\uffbf\011\uffbf\017\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\071\062\055\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001" +
    "\002\000\102\005\uffc7\007\uffc7\011\uffc7\017\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\074\032" +
    "\052\033\063\034\070\035\051\036\uffc7\037\uffc7\040\067" +
    "\051\uffc7\052\uffc7\053\061\054\072\055\054\056\062\057" +
    "\053\060\073\061\071\062\055\063\066\064\056\065\065" +
    "\066\060\001\002\000\102\005\uffc0\007\uffc0\011\uffc0\017" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\071\062\055\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\001\002\000\060\007\uffb5\017\uffb5" +
    "\031\074\032\052\033\063\034\070\035\051\036\uffb5\040" +
    "\067\051\uffb5\052\uffb5\053\061\054\072\055\054\056\062" +
    "\057\053\060\073\061\071\062\055\063\066\064\056\065" +
    "\065\066\060\001\002\000\060\007\uffb4\017\uffb4\031\074" +
    "\032\052\033\063\034\070\035\051\036\uffb4\040\067\051" +
    "\uffb4\052\uffb4\053\061\054\072\055\054\056\062\057\053" +
    "\060\073\061\071\062\055\063\066\064\056\065\065\066" +
    "\060\001\002\000\034\006\023\012\007\032\005\041\036" +
    "\042\040\043\011\044\035\045\010\046\026\047\014\050" +
    "\017\061\031\062\012\001\002\000\102\005\uffb9\007\uffb9" +
    "\011\uffb9\017\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027" +
    "\uffb9\030\uffb9\031\074\032\052\033\063\034\070\035\051" +
    "\036\uffb9\037\uffb9\040\067\051\uffb9\052\uffb9\053\061\054" +
    "\072\055\054\056\062\057\053\060\073\061\071\062\055" +
    "\063\066\064\056\065\065\066\060\001\002\000\060\007" +
    "\uffb6\017\uffb6\031\074\032\052\033\063\034\070\035\051" +
    "\036\uffb6\040\067\051\uffb6\052\uffb6\053\061\054\072\055" +
    "\054\056\062\057\053\060\073\061\071\062\055\063\066" +
    "\064\056\065\065\066\060\001\002\000\060\007\uffb7\017" +
    "\uffb7\031\074\032\052\033\063\034\070\035\051\036\uffb7" +
    "\040\067\051\uffb7\052\uffb7\053\061\054\072\055\054\056" +
    "\062\057\053\060\073\061\071\062\055\063\066\064\056" +
    "\065\065\066\060\001\002\000\102\005\uffc1\007\uffc1\011" +
    "\uffc1\017\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\063\034\070\035\051\036" +
    "\uffc1\037\uffc1\040\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\071\062\055\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\102\005\uffbe" +
    "\007\uffbe\011\uffbe\017\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\071" +
    "\062\055\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000" +
    "\004\007\131\001\002\000\034\006\uffb1\012\uffb1\032\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\061\uffb1\062\uffb1\001\002\000\034\006\uff97" +
    "\012\uff97\032\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\061\uff97\062\uff97\001\002" +
    "\000\034\006\uffbd\012\uffbd\032\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\061\uffbd" +
    "\062\uffbd\001\002\000\034\006\uffaf\012\uffaf\032\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\061\uffaf\062\uffaf\001\002\000\034\006\023\012" +
    "\007\032\005\041\036\042\040\043\011\044\035\045\010" +
    "\046\026\047\014\050\017\061\031\062\012\001\002\000" +
    "\014\007\uffae\017\uffae\036\uffae\051\114\052\uffae\001\002" +
    "\000\034\006\023\012\007\032\005\041\036\042\040\043" +
    "\011\044\035\045\010\046\026\047\014\050\017\061\031" +
    "\062\012\001\002\000\050\031\074\032\052\033\063\034" +
    "\070\035\051\037\124\040\067\053\061\054\072\055\054" +
    "\056\062\057\053\060\073\061\071\062\055\063\066\064" +
    "\056\065\065\066\060\001\002\000\034\006\uffbc\012\uffbc" +
    "\032\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\061\uffbc\062\uffbc\001\002\000\034" +
    "\006\023\012\007\032\005\041\036\042\040\043\011\044" +
    "\035\045\010\046\026\047\014\050\017\061\031\062\012" +
    "\001\002\000\102\005\uffbb\007\uffbb\011\uffbb\017\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031\074" +
    "\032\052\033\063\034\070\035\051\036\uffbb\037\uffbb\040" +
    "\067\051\uffbb\052\uffbb\053\061\054\072\055\054\056\062" +
    "\057\053\060\073\061\071\062\055\063\066\064\056\065" +
    "\065\066\060\001\002\000\034\006\023\012\007\032\005" +
    "\041\036\042\040\043\011\044\035\045\010\046\026\047" +
    "\014\050\017\061\031\062\012\001\002\000\014\007\uffb0" +
    "\017\uffb0\036\uffb0\051\uffb0\052\uffb0\001\002\000\050\004" +
    "\013\005\024\006\023\010\016\012\007\013\022\015\037" +
    "\016\032\032\005\041\036\042\040\043\011\044\035\045" +
    "\010\046\026\047\014\050\017\061\031\062\012\001\002" +
    "\000\056\002\ufff7\004\ufff7\005\ufff7\006\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\032\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\061\ufff7\062\ufff7\001\002\000\004\012\135" +
    "\001\002\000\102\005\uffe2\007\uffe2\011\uffe2\017\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\001\002\000\106\005\uffe1\007\uffe1\011\uffe1" +
    "\017\uffe1\021\uffdb\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\144\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000" +
    "\102\005\uffd4\007\uffd4\011\uffd4\017\uffd4\022\142\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\001\002\000\102\005\uffd2\007\uffd2\011\uffd2\017\uffd2\022" +
    "\140\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\001\002\000\004\012\135\001\002\000\102" +
    "\005\uffd3\007\uffd3\011\uffd3\017\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\001" +
    "\002\000\004\012\135\001\002\000\102\005\uffd5\007\uffd5" +
    "\011\uffd5\017\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\001\002\000\034\006" +
    "\023\012\007\032\005\041\036\042\040\043\011\044\035" +
    "\045\010\046\026\047\014\050\017\061\031\062\012\001" +
    "\002\000\004\021\146\001\002\000\034\006\023\012\007" +
    "\032\005\041\036\042\040\043\011\044\035\045\010\046" +
    "\026\047\014\050\017\061\031\062\012\001\002\000\102" +
    "\005\uffda\007\uffda\011\uffda\017\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\027\uffda\030\uffda\031\074\032\052\033\063" +
    "\034\070\035\051\036\uffda\037\uffda\040\067\051\uffda\052" +
    "\uffda\053\061\054\072\055\054\056\062\057\053\060\073" +
    "\061\071\062\055\063\066\064\056\065\065\066\060\001" +
    "\002\000\050\027\151\031\074\032\052\033\063\034\070" +
    "\035\051\040\067\053\061\054\072\055\054\056\062\057" +
    "\053\060\073\061\071\062\055\063\066\064\056\065\065" +
    "\066\060\001\002\000\104\005\uffe0\007\uffe0\011\uffe0\017" +
    "\uffe0\021\152\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\004\010\uffd7" +
    "\001\002\000\004\021\154\001\002\000\034\006\023\012" +
    "\007\032\005\041\036\042\040\043\011\044\035\045\010" +
    "\046\026\047\014\050\017\061\031\062\012\001\002\000" +
    "\102\005\uffd8\007\uffd8\011\uffd8\017\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\027\uffd8\030\uffd8\031\074\032\052\033" +
    "\063\034\070\035\051\036\uffd8\037\uffd8\040\067\051\uffd8" +
    "\052\uffd8\053\061\054\072\055\054\056\062\057\053\060" +
    "\073\061\071\062\055\063\066\064\056\065\065\066\060" +
    "\001\002\000\004\010\157\001\002\000\034\006\023\012" +
    "\007\032\005\041\036\042\040\043\011\044\035\045\010" +
    "\046\026\047\014\050\017\061\031\062\012\001\002\000" +
    "\052\011\uff9e\022\163\031\074\032\052\033\063\034\070" +
    "\035\051\040\067\053\061\054\072\055\054\056\062\057" +
    "\053\060\073\061\071\062\055\063\066\064\056\065\065" +
    "\066\060\001\002\000\004\011\162\001\002\000\102\005" +
    "\uffd6\007\uffd6\011\uffd6\017\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002" +
    "\000\034\006\023\012\007\032\005\041\036\042\040\043" +
    "\011\044\035\045\010\046\026\047\014\050\017\061\031" +
    "\062\012\001\002\000\004\011\uff9f\001\002\000\054\023" +
    "\213\024\211\030\210\031\074\032\052\033\063\034\070" +
    "\035\051\040\067\053\061\054\072\055\054\056\062\057" +
    "\053\060\073\061\071\062\055\063\066\064\056\065\065" +
    "\066\060\001\002\000\034\006\023\012\007\032\005\041" +
    "\036\042\040\043\011\044\035\045\010\046\026\047\014" +
    "\050\017\061\031\062\012\001\002\000\012\007\206\036" +
    "\115\051\114\052\117\001\002\000\052\007\174\017\ufff3" +
    "\031\074\032\052\033\063\034\070\035\051\040\067\053" +
    "\061\054\072\055\054\056\062\057\053\060\073\061\071" +
    "\062\055\063\066\064\056\065\065\066\060\001\002\000" +
    "\006\007\172\012\uffe3\001\002\000\034\006\023\012\007" +
    "\032\005\041\036\042\040\043\011\044\035\045\010\046" +
    "\026\047\014\050\017\061\031\062\012\001\002\000\102" +
    "\005\uffe7\007\uffe7\011\uffe7\017\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\001" +
    "\002\000\102\005\uffe9\007\uffe9\011\uffe9\017\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\001\002\000\004\017\176\001\002\000\034\006" +
    "\023\012\007\032\005\041\036\042\040\043\011\044\035" +
    "\045\010\046\026\047\014\050\017\061\031\062\012\001" +
    "\002\000\012\017\ufff2\036\115\051\114\052\117\001\002" +
    "\000\004\017\201\001\002\000\034\006\023\012\007\032" +
    "\005\041\036\042\040\043\011\044\035\045\010\046\026" +
    "\047\014\050\017\061\031\062\012\001\002\000\050\007" +
    "\ufff1\031\074\032\052\033\063\034\070\035\051\040\067" +
    "\053\061\054\072\055\054\056\062\057\053\060\073\061" +
    "\071\062\055\063\066\064\056\065\065\066\060\001\002" +
    "\000\004\007\204\001\002\000\050\004\013\005\024\006" +
    "\023\010\016\012\007\013\022\015\037\016\032\032\005" +
    "\041\036\042\040\043\011\044\035\045\010\046\026\047" +
    "\014\050\017\061\031\062\012\001\002\000\056\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\032\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\061" +
    "\ufff0\062\ufff0\001\002\000\014\007\uffad\017\uffad\036\uffad" +
    "\051\uffad\052\uffad\001\002\000\034\006\023\012\007\032" +
    "\005\041\036\042\040\043\011\044\035\045\010\046\026" +
    "\047\014\050\017\061\031\062\012\001\002\000\036\006" +
    "\uff9a\010\uff9a\012\uff9a\032\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\061\uff9a\062" +
    "\uff9a\001\002\000\034\006\uff99\012\uff99\032\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\061\uff99\062\uff99\001\002\000\034\006\023\012\007" +
    "\032\005\041\036\042\040\043\011\044\035\045\010\046" +
    "\026\047\014\050\017\061\031\062\012\001\002\000\034" +
    "\006\uff9b\012\uff9b\032\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\061\uff9b\062\uff9b" +
    "\001\002\000\036\006\023\010\215\012\007\032\005\041" +
    "\036\042\040\043\011\044\035\045\010\046\026\047\014" +
    "\050\017\061\031\062\012\001\002\000\034\006\023\012" +
    "\007\032\005\041\036\042\040\043\011\044\035\045\010" +
    "\046\026\047\014\050\017\061\031\062\012\001\002\000" +
    "\004\005\uffa6\001\002\000\050\005\uffa4\031\074\032\052" +
    "\033\063\034\070\035\051\040\067\053\061\054\072\055" +
    "\054\056\062\057\053\060\073\061\071\062\055\063\066" +
    "\064\056\065\065\066\060\001\002\000\004\005\221\001" +
    "\002\000\050\004\013\005\024\006\023\010\016\012\007" +
    "\013\022\015\037\016\032\032\005\041\036\042\040\043" +
    "\011\044\035\045\010\046\026\047\014\050\017\061\031" +
    "\062\012\001\002\000\056\002\uffa5\004\uffa5\005\uffa5\006" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\032\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\061\uffa5\062\uffa5\001\002" +
    "\000\004\011\224\001\002\000\004\005\uffa3\001\002\000" +
    "\052\005\uffac\025\uffac\031\074\032\052\033\063\034\070" +
    "\035\051\040\067\053\061\054\072\055\054\056\062\057" +
    "\053\060\073\061\071\062\055\063\066\064\056\065\065" +
    "\066\060\001\002\000\006\005\uff9c\025\227\001\002\000" +
    "\034\006\023\012\007\032\005\041\036\042\040\043\011" +
    "\044\035\045\010\046\026\047\014\050\017\061\031\062" +
    "\012\001\002\000\004\005\231\001\002\000\050\004\uffab" +
    "\005\uffab\006\uffab\010\uffab\012\uffab\013\uffab\015\uffab\016" +
    "\uffab\032\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\061\uffab\062\uffab\001\002\000" +
    "\050\004\013\005\024\006\023\010\016\012\007\013\022" +
    "\015\037\016\032\032\005\041\036\042\040\043\011\044" +
    "\035\045\010\046\026\047\014\050\017\061\031\062\012" +
    "\001\002\000\056\002\uffaa\004\uffaa\005\uffaa\006\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\032\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\061\uffaa\062\uffaa\001\002\000\050" +
    "\005\uff9d\031\074\032\052\033\063\034\070\035\051\040" +
    "\067\053\061\054\072\055\054\056\062\057\053\060\073" +
    "\061\071\062\055\063\066\064\056\065\065\066\060\001" +
    "\002\000\052\005\uffa9\025\uffa9\031\074\032\052\033\063" +
    "\034\070\035\051\040\067\053\061\054\072\055\054\056" +
    "\062\057\053\060\073\061\071\062\055\063\066\064\056" +
    "\065\065\066\060\001\002\000\006\005\uff9c\025\227\001" +
    "\002\000\004\005\240\001\002\000\050\004\uffa8\005\uffa8" +
    "\006\uffa8\010\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\032" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\061\uffa8\062\uffa8\001\002\000\050\004" +
    "\013\005\024\006\023\010\016\012\007\013\022\015\037" +
    "\016\032\032\005\041\036\042\040\043\011\044\035\045" +
    "\010\046\026\047\014\050\017\061\031\062\012\001\002" +
    "\000\056\002\uffa7\004\uffa7\005\uffa7\006\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\032\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\061\uffa7\062\uffa7\001\002\000\004\002\001" +
    "\001\002\000\054\002\uffff\004\uffff\005\uffff\006\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\015\uffff\016\uffff\032\uffff" +
    "\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\061\uffff\062\uffff\001\002\000\034\006\023" +
    "\012\007\032\005\041\036\042\040\043\011\044\035\045" +
    "\010\046\026\047\014\050\017\061\031\062\012\001\002" +
    "\000\050\007\247\031\074\032\052\033\063\034\070\035" +
    "\051\040\067\053\061\054\072\055\054\056\062\057\053" +
    "\060\073\061\071\062\055\063\066\064\056\065\065\066" +
    "\060\001\002\000\004\017\250\001\002\000\056\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\032\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\061" +
    "\uffee\062\uffee\001\002\000\102\005\uffcc\007\uffcc\011\uffcc" +
    "\017\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\001\002\000\050\007\174\031" +
    "\074\032\052\033\063\034\070\035\051\040\067\053\061" +
    "\054\072\055\054\056\062\057\053\060\073\061\071\062" +
    "\055\063\066\064\056\065\065\066\060\001\002\000\056" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\032\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\061\ufffd\062\ufffd\001\002\000\014\007\uffb2\017\uffb2" +
    "\036\uffb2\051\uffb2\052\uffb2\001\002\000\052\004\013\005" +
    "\024\006\023\010\016\011\ufffe\012\007\013\022\015\037" +
    "\016\032\032\005\041\036\042\040\043\011\044\035\045" +
    "\010\046\026\047\014\050\017\061\031\062\012\001\002" +
    "\000\052\004\013\005\024\006\023\010\016\011\257\012" +
    "\007\013\022\015\037\016\032\032\005\041\036\042\040" +
    "\043\011\044\035\045\010\046\026\047\014\050\017\061" +
    "\031\062\012\001\002\000\056\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\032\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\061\uffec\062\uffec\001" +
    "\002\000\050\004\013\005\024\006\023\010\016\012\007" +
    "\013\022\015\037\016\032\032\005\041\036\042\040\043" +
    "\011\044\035\045\010\046\026\047\014\050\017\061\031" +
    "\062\012\001\002\000\004\004\262\001\002\000\004\006" +
    "\263\001\002\000\034\006\023\012\007\032\005\041\036" +
    "\042\040\043\011\044\035\045\010\046\026\047\014\050" +
    "\017\061\031\062\012\001\002\000\012\007\265\036\115" +
    "\051\114\052\117\001\002\000\004\017\ufff5\001\002\000" +
    "\004\017\267\001\002\000\056\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\032\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\061\ufff4\062\ufff4\001" +
    "\002\000\102\005\uffcb\007\uffcb\011\uffcb\017\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\001\002\000\036\006\023\010\302\012\007\032" +
    "\005\041\036\042\040\043\011\044\035\045\010\046\026" +
    "\047\014\050\017\061\031\062\012\001\002\000\034\006" +
    "\023\012\007\032\005\041\036\042\040\043\011\044\035" +
    "\045\010\046\026\047\014\050\017\061\031\062\012\001" +
    "\002\000\034\006\023\012\007\032\005\041\036\042\040" +
    "\043\011\044\035\045\010\046\026\047\014\050\017\061" +
    "\031\062\012\001\002\000\050\027\275\031\074\032\052" +
    "\033\063\034\070\035\051\040\067\053\061\054\072\055" +
    "\054\056\062\057\053\060\073\061\071\062\055\063\066" +
    "\064\056\065\065\066\060\001\002\000\104\005\uffcf\007" +
    "\uffcf\011\uffcf\017\uffcf\021\276\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002" +
    "\000\034\006\uffde\012\uffde\032\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\061\uffde" +
    "\062\uffde\001\002\000\034\006\023\012\007\032\005\041" +
    "\036\042\040\043\011\044\035\045\010\046\026\047\014" +
    "\050\017\061\031\062\012\001\002\000\102\005\uffdd\007" +
    "\uffdd\011\uffdd\017\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\027\uffdd\030\uffdd\031\074\032\052\033\063\034\070\035" +
    "\051\036\uffdd\037\uffdd\040\067\051\uffdd\052\uffdd\053\061" +
    "\054\072\055\054\056\062\057\053\060\073\061\071\062" +
    "\055\063\066\064\056\065\065\066\060\001\002\000\102" +
    "\005\uffc8\007\uffc8\011\uffc8\017\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\027\uffc8\030\uffc8\031\074\032\052\033\063" +
    "\034\070\035\051\036\uffc8\037\uffc8\040\067\051\uffc8\052" +
    "\uffc8\053\061\054\072\055\054\056\062\057\053\060\073" +
    "\061\071\062\055\063\066\064\056\065\065\066\060\001" +
    "\002\000\034\006\023\012\007\032\005\041\036\042\040" +
    "\043\011\044\035\045\010\046\026\047\014\050\017\061" +
    "\031\062\012\001\002\000\102\005\uffdf\007\uffdf\011\uffdf" +
    "\017\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030" +
    "\uffdf\031\074\032\052\033\063\034\070\035\051\036\uffdf" +
    "\037\uffdf\040\067\051\uffdf\052\uffdf\053\061\054\072\055" +
    "\054\056\062\057\053\060\073\061\071\062\055\063\066" +
    "\064\056\065\065\066\060\001\002\000\004\011\305\001" +
    "\002\000\102\005\uffdc\007\uffdc\011\uffdc\017\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\001\002\000\034\006\023\012\007\032\005\041" +
    "\036\042\040\043\011\044\035\045\010\046\026\047\014" +
    "\050\017\061\031\062\012\001\002\000\012\007\ufffc\036" +
    "\115\051\114\052\117\001\002\000\004\007\311\001\002" +
    "\000\050\004\013\005\024\006\023\010\016\012\007\013" +
    "\022\015\037\016\032\032\005\041\036\042\040\043\011" +
    "\044\035\045\010\046\026\047\014\050\017\061\031\062" +
    "\012\001\002\000\056\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\032\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\050\ufffb\061\ufffb\062\ufffb\001\002\000" +
    "\056\002\uff94\004\uff94\005\uff94\006\uff94\010\uff94\011\uff94" +
    "\012\uff94\013\uff94\014\314\015\uff94\016\uff94\032\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\061\uff94\062\uff94\001\002\000\050\004\013\005" +
    "\024\006\023\010\016\012\007\013\022\015\037\016\032" +
    "\032\005\041\036\042\040\043\011\044\035\045\010\046" +
    "\026\047\014\050\017\061\031\062\012\001\002\000\056" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\032\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\061\ufffa\062\ufffa\001\002\000\056\002\uff95\004\uff95" +
    "\005\uff95\006\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\032\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\061\uff95\062" +
    "\uff95\001\002\000\102\005\uffe8\007\uffe8\011\uffe8\017\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\063\034\070\035\051\036\uffe8\037\uffe8" +
    "\040\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\071\062\055\063\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\036\002\033\003\027\004\020\005\005\007" +
    "\042\010\041\011\043\012\024\013\003\016\026\017\032" +
    "\027\017\030\040\031\014\001\001\000\002\001\001\000" +
    "\020\004\316\010\041\011\043\012\024\016\026\017\032" +
    "\027\017\001\001\000\002\001\001\000\004\026\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\267" +
    "\010\041\011\043\012\024\016\026\017\032\027\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\257" +
    "\001\001\000\004\046\254\001\001\000\020\004\047\010" +
    "\041\011\043\012\024\016\026\017\032\027\253\001\001" +
    "\000\004\024\115\001\001\000\006\025\056\026\063\001" +
    "\001\000\002\001\001\000\020\004\251\010\170\011\043" +
    "\012\024\016\026\017\032\027\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\250\010\041\011\043\012" +
    "\024\016\026\017\032\027\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\243\004\020\005\005\007" +
    "\042\010\041\011\043\012\024\013\003\016\026\017\032" +
    "\027\017\030\040\031\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\164\010\041\011\043\012\024\016\026\017\032\027" +
    "\017\001\001\000\004\047\132\001\001\000\004\037\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\047\010\041\011\043\012\024\016\026\017\032\027\046" +
    "\001\001\000\006\024\115\040\112\001\001\000\006\025" +
    "\056\026\063\001\001\000\020\004\111\010\041\011\043" +
    "\012\024\016\026\017\032\027\017\001\001\000\020\004" +
    "\110\010\041\011\043\012\024\016\026\017\032\027\017" +
    "\001\001\000\020\004\107\010\041\011\043\012\024\016" +
    "\026\017\032\027\017\001\001\000\020\004\106\010\041" +
    "\011\043\012\024\016\026\017\032\027\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\104\001\001" +
    "\000\002\001\001\000\020\004\103\010\041\011\043\012" +
    "\024\016\026\017\032\027\017\001\001\000\020\004\102" +
    "\010\041\011\043\012\024\016\026\017\032\027\017\001" +
    "\001\000\020\004\101\010\041\011\043\012\024\016\026" +
    "\017\032\027\017\001\001\000\020\004\100\010\041\011" +
    "\043\012\024\016\026\017\032\027\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\077\010\041\011\043\012\024\016\026\017\032\027\017" +
    "\001\001\000\002\001\001\000\020\004\076\010\041\011" +
    "\043\012\024\016\026\017\032\027\017\001\001\000\020" +
    "\004\075\010\041\011\043\012\024\016\026\017\032\027" +
    "\017\001\001\000\020\004\074\010\041\011\043\012\024" +
    "\016\026\017\032\027\017\001\001\000\006\025\056\026" +
    "\063\001\001\000\006\025\056\026\063\001\001\000\006" +
    "\025\056\026\063\001\001\000\006\025\056\026\063\001" +
    "\001\000\006\025\056\026\063\001\001\000\006\025\056" +
    "\026\063\001\001\000\006\025\056\026\063\001\001\000" +
    "\006\025\056\026\063\001\001\000\020\004\105\010\041" +
    "\011\043\012\024\016\026\017\032\027\017\001\001\000" +
    "\006\025\056\026\063\001\001\000\006\025\056\026\063" +
    "\001\001\000\006\025\056\026\063\001\001\000\006\025" +
    "\056\026\063\001\001\000\006\025\056\026\063\001\001" +
    "\000\002\001\001\000\004\057\126\001\001\000\002\001" +
    "\001\000\004\054\121\001\001\000\004\060\117\001\001" +
    "\000\020\004\047\010\041\011\043\012\024\016\026\017" +
    "\032\027\120\001\001\000\004\024\115\001\001\000\020" +
    "\004\122\010\041\011\043\012\024\016\026\017\032\027" +
    "\017\001\001\000\006\025\056\026\063\001\001\000\004" +
    "\055\124\001\001\000\020\004\125\010\041\011\043\012" +
    "\024\016\026\017\032\027\017\001\001\000\006\025\056" +
    "\026\063\001\001\000\020\004\047\010\041\011\043\012" +
    "\024\016\026\017\032\027\127\001\001\000\004\024\115" +
    "\001\001\000\034\003\131\004\020\005\005\007\042\010" +
    "\041\011\043\012\024\013\003\016\026\017\032\027\017" +
    "\030\040\031\014\001\001\000\002\001\001\000\010\020" +
    "\135\021\136\023\133\001\001\000\002\001\001\000\004" +
    "\051\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\135\021\136\023\140\001\001\000\002\001\001" +
    "\000\010\020\135\021\136\023\142\001\001\000\002\001" +
    "\001\000\020\004\147\010\041\011\043\012\024\016\026" +
    "\017\032\027\017\001\001\000\002\001\001\000\020\004" +
    "\146\010\041\011\043\012\024\016\026\017\032\027\017" +
    "\001\001\000\006\025\056\026\063\001\001\000\006\025" +
    "\056\026\063\001\001\000\004\052\152\001\001\000\004" +
    "\053\155\001\001\000\002\001\001\000\020\004\154\010" +
    "\041\011\043\012\024\016\026\017\032\027\017\001\001" +
    "\000\006\025\056\026\063\001\001\000\002\001\001\000" +
    "\022\004\157\010\041\011\043\012\024\015\160\016\026" +
    "\017\032\027\017\001\001\000\006\025\056\026\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\157" +
    "\010\041\011\043\012\024\015\163\016\026\017\032\027" +
    "\017\001\001\000\002\001\001\000\014\025\056\026\063" +
    "\032\211\033\206\034\213\001\001\000\020\004\167\010" +
    "\170\011\043\012\024\016\026\017\032\027\166\001\001" +
    "\000\004\024\115\001\001\000\010\025\056\026\063\043" +
    "\174\001\001\000\004\047\132\001\001\000\020\004\172" +
    "\010\041\011\043\012\024\016\026\017\032\027\017\001" +
    "\001\000\006\025\056\026\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\047\010\041\011\043\012" +
    "\024\016\026\017\032\027\176\001\001\000\006\024\115" +
    "\044\177\001\001\000\002\001\001\000\020\004\201\010" +
    "\041\011\043\012\024\016\026\017\032\027\017\001\001" +
    "\000\010\025\056\026\063\045\202\001\001\000\002\001" +
    "\001\000\034\003\204\004\020\005\005\007\042\010\041" +
    "\011\043\012\024\013\003\016\026\017\032\027\017\030" +
    "\040\031\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\234\010\041\011\043\012\024\016\026\017" +
    "\032\027\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\224\010\041\011\043\012\024\016\026\017" +
    "\032\027\017\001\001\000\002\001\001\000\022\004\216" +
    "\010\041\011\043\012\024\016\026\017\032\022\215\027" +
    "\017\001\001\000\022\004\157\010\041\011\043\012\024" +
    "\015\222\016\026\017\032\027\017\001\001\000\004\065" +
    "\217\001\001\000\006\025\056\026\063\001\001\000\002" +
    "\001\001\000\034\003\221\004\020\005\005\007\042\010" +
    "\041\011\043\012\024\013\003\016\026\017\032\027\017" +
    "\030\040\031\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\056\026\063\061\225" +
    "\001\001\000\004\014\227\001\001\000\020\004\233\010" +
    "\041\011\043\012\024\016\026\017\032\027\017\001\001" +
    "\000\002\001\001\000\004\062\231\001\001\000\034\003" +
    "\232\004\020\005\005\007\042\010\041\011\043\012\024" +
    "\013\003\016\026\017\032\027\017\030\040\031\014\001" +
    "\001\000\002\001\001\000\006\025\056\026\063\001\001" +
    "\000\010\025\056\026\063\063\235\001\001\000\004\014" +
    "\236\001\001\000\002\001\001\000\004\064\240\001\001" +
    "\000\034\003\241\004\020\005\005\007\042\010\041\011" +
    "\043\012\024\013\003\016\026\017\032\027\017\030\040" +
    "\031\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\245\010\041\011\043\012\024" +
    "\016\026\017\032\027\017\001\001\000\006\025\056\026" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\056\026\063\001\001\000\006\025\056\026\063\001" +
    "\001\000\002\001\001\000\004\024\115\001\001\000\036" +
    "\002\255\003\027\004\020\005\005\007\042\010\041\011" +
    "\043\012\024\013\003\016\026\017\032\027\017\030\040" +
    "\031\014\001\001\000\034\003\243\004\020\005\005\007" +
    "\042\010\041\011\043\012\024\013\003\016\026\017\032" +
    "\027\017\030\040\031\014\001\001\000\002\001\001\000" +
    "\034\003\260\004\020\005\005\007\042\010\041\011\043" +
    "\012\024\013\003\016\026\017\032\027\017\030\040\031" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\047\010\041\011\043\012\024\016\026\017\032\027" +
    "\263\001\001\000\004\024\115\001\001\000\004\042\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\056\026\063\001\001\000\020\004\302\010\041\011\043" +
    "\012\024\016\026\017\032\027\017\001\001\000\020\004" +
    "\300\010\041\011\043\012\024\016\026\017\032\027\017" +
    "\001\001\000\020\004\273\010\041\011\043\012\024\016" +
    "\026\017\032\027\017\001\001\000\006\025\056\026\063" +
    "\001\001\000\002\001\001\000\004\050\276\001\001\000" +
    "\020\004\277\010\041\011\043\012\024\016\026\017\032" +
    "\027\017\001\001\000\006\025\056\026\063\001\001\000" +
    "\006\025\056\026\063\001\001\000\022\004\157\010\041" +
    "\011\043\012\024\015\303\016\026\017\032\027\017\001" +
    "\001\000\006\025\056\026\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\047\010\041\011\043\012" +
    "\024\016\026\017\032\027\306\001\001\000\006\024\115" +
    "\035\307\001\001\000\002\001\001\000\034\003\311\004" +
    "\020\005\005\007\042\010\041\011\043\012\024\013\003" +
    "\016\026\017\032\027\017\030\040\031\014\001\001\000" +
    "\004\036\312\001\001\000\004\006\314\001\001\000\034" +
    "\003\315\004\020\005\005\007\042\010\041\011\043\012" +
    "\024\013\003\016\026\017\032\027\017\030\040\031\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\056\026\063\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    String uID = "";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // prWHILE ::= WHILE 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWHILE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // prFOR ::= FOR 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // prDO ::= DO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // prELSE ::= 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // prELSE ::= ELSE Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // prELVIS ::= ELVIS 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELVIS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // prIGACION ::= IGACION 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIGACION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // prIF ::= IF 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // prDOWNTO ::= DOWNTO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDOWNTO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // prIN ::= IN 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // prTO ::= TO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // prSTEP ::= 
            {
              String RESULT =null;
		RESULT = "1";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSTEP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // prSTEP ::= STEP Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSTEP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // prArray ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // prArray ::= Expresion COMA prArray 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e + " " + l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Ids ::= CHAR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; uID = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Ids ::= FLOAT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; uID = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Ids ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; uID = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // prFORIN ::= ALL prArray CLL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.nuevaTemp(); String[] array = p.split(" "); TablaSimbolos.putRegistro(temp,TablaSimbolos.tipoValor(array[0])); TablaSimbolos.put(temp + ":" + array.length, TablaSimbolos.tipoValor(array[0])); for(int i = 0; i < array.length; i++) {Generator.salida(sym.IDENT, array[i],null, temp + ":" + i);}  RESULT = temp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORIN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // prFORIN ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORIN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // prFORTO ::= prFOR Expresion prIN prFORIN NT$24 DO Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.f()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$24 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (TablaSimbolos.operacionReal(e1, e2) == 1 ||TablaSimbolos.operacionReal(e1, e2) == 2) System.out.println("#ERROR: Valor indice no coincide"); String i = Generator.nuevaTemp(); TablaSimbolos.putRegistro(i, "int"); Generator.salida(Generator.ASIG, "-1", null, i); Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(sym.MASMAS, null, null, i); if (TablaSimbolos.getMatriz(e2).split(":").length<2){System.out.println("#ERROR: Array no detectado");} else { Generator.salida(Generator.IFGOTO, i+" < ", TablaSimbolos.getMatriz(e2).split(":")[1], forr.f()); }Generator.salida(Generator.GOTO, null, null, c.f()); Generator.salida(Generator.LABEL, null, null, forr.f()); Generator.salida(sym.IDENT, e2+":"+i, null, e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // prFORTO ::= prFOR Expresion prDOWNTO Expresion NT$22 prSTEP DO NT$23 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$23 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(sym.MENOS, e1 + TablaSimbolos.get(e1), s, e1 + TablaSimbolos.get(e1)); Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$22 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(Generator.IFGOTO, e1+" < ", e2, c.f()); Generator.salida(Generator.GOTO, null, null, c.v()); Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // prFORTO ::= prFOR Expresion prTO Expresion NT$20 prSTEP DO NT$21 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$21 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(sym.MAS, e1 + TablaSimbolos.get(e1), s, e1 + TablaSimbolos.get(e1)); Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$20 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(Generator.IFGOTO, e2+" < ", e1, c.f()); Generator.salida(Generator.GOTO, null, null, c.v()); Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condicion ::= AP Condicion CP 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condicion ::= Condicion OR NT$19 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.v()); Generator.salida(Generator.GOTO, null, null, c2.v()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$19 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Condicion ::= Condicion AND NT$18 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.f()); Generator.salida(Generator.GOTO, null, null, c2.f()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$18 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Condicion ::= NOT Condicion 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.swap(); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condicion ::= Expresion GE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Condicion ::= Expresion GT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Condicion ::= Expresion LE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion ::= Expresion LT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Expresion NE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= Expresion EQ Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Operador ::= Expresion prELVIS NT$17 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(sym.IDENT, e2, null, RESULT); Generator.salida(Generator.LABEL, null, null, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$17 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, "int"); Generator.salida(sym.IDENT, e1, null, RESULT); Generator.salida(Generator.IFGOTO, e1+" != ", "0", p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Condicion prIGACION NT$15 Expresion DOSPUN NT$16 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(sym.IDENT, e2, null, RESULT); Generator.salida(Generator.LABEL, null, null, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, "int"); Generator.salida(sym.IDENT, e1, null, RESULT); Generator.salida(Generator.GOTO, null, null, p); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$15 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MOD, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.DIV, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Operador ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.POR, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Operador ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MENOS, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Operador ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MAS, e1, e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OperadorIGUAL ::= DIVIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.DIVIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperadorIGUAL ::= PORIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.PORIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperadorIGUAL ::= MENOSIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.MENOSIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OperadorIGUAL ::= MASIGUAL 
            {
              Integer RESULT =null;
		RESULT = sym.MASIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorIGUAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Incr ::= Expresion OperadorIGUAL Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("#ERROR: Expresion en incrementos"); RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Incr ::= IDENT OperadorIGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(o, i, e, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Incr ::= Expresion MENOSMENOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, TablaSimbolos.getTipo(e)); Generator.salida(sym.IDENT, TablaSimbolos.getConcat(e), null, RESULT); Generator.salida(sym.MENOSMENOS, null, null, TablaSimbolos.getConcat(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Incr ::= Expresion MASMAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Generator.nuevaTemp(); TablaSimbolos.putRegistro(RESULT, TablaSimbolos.getTipo(e)); Generator.salida(sym.IDENT, TablaSimbolos.getConcat(e), null, RESULT); Generator.salida(sym.MASMAS, null, null, TablaSimbolos.getConcat(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Incr ::= MENOSMENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = TablaSimbolos.getConcat(e); Generator.salida(sym.MENOSMENOS, null, null, RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Incr ::= MASMAS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = TablaSimbolos.getConcat(e); Generator.salida(sym.MASMAS, null, null, RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Valor ::= UNICODE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "'"+(char)Integer.parseInt(e, 16)+"'"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Valor ::= LETRA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Valor ::= IDENT ACOR Expresion CCOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String array = i+":"+e; Generator.comprobacionRango(array.split(":")); String temp = Generator.nuevaTemp(); Generator.salida(sym.IDENT, array, null, temp); RESULT = temp; TablaSimbolos.putRegistro(temp, TablaSimbolos.getTipo(i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Valor ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Valor ::= REAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // prDeclaracion ::= DeclAsig 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // prDeclaracion ::= DeclAsig COMA prDeclaracion 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // prDeclaracion ::= Declaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // prDeclaracion ::= Declaracion COMA prDeclaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDeclaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DeclAsig ::= IDENT ACOR Expresion CCOR IGUAL NT$14 ALL prArray CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.nuevaTemp(); String[] array = p.split(" "); TablaSimbolos.putRegistro(temp,TablaSimbolos.tipoValor(array[0])); TablaSimbolos.put(temp + ":" + array.length, TablaSimbolos.tipoValor(array[0])); for(int i = 0; i < array.length; i++) {Generator.salida(sym.IDENT, array[i],null, temp + ":" + i);}  RESULT = Generator.salida(Generator.ASIG, temp, null, id); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclAsig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$14 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
String array = id + ":" + e; TablaSimbolos.put(array, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DeclAsig ::= IDENT ACOR Expresion CCOR NT$13 IGUAL Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e2, null, id+":"+e1); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclAsig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$13 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
String array = id + ":" + e1; TablaSimbolos.put(array, uID); Generator.comprobacionRango(array.split(":"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DeclAsig ::= IDENT NT$12 IGUAL Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e, null, e1); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclAsig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = e1; TablaSimbolos.put(RESULT, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asignacion ::= IDENT IGUAL ALL prArray CLL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.nuevaTemp(); String[] array = p.split(" "); TablaSimbolos.putRegistro(temp,TablaSimbolos.tipoValor(array[0])); TablaSimbolos.put(temp + ":" + array.length, TablaSimbolos.tipoValor(array[0])); for(int i = 0; i < array.length; i++) {Generator.salida(sym.IDENT, array[i],null, temp + ":" + i);}  RESULT = Generator.salida(Generator.ASIG, temp, null, id); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Asignacion ::= IDENT ACOR Expresion CCOR IGUAL NT$11 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e2, null, i+":"+e); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
String array = i+":"+e; Generator.comprobacionRango(array.split(":"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Asignacion ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.ASIG, e, null, i); RESULT = RESULT + TablaSimbolos.get(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declaracion ::= IDENT ACOR Expresion CCOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = id + ":" + e; TablaSimbolos.put(RESULT, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declaracion ::= IDENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; TablaSimbolos.put(RESULT, uID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= Ids NT$10 prDeclaracion 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$10 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
uID = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= Valor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= Asignacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.comprobacionRango(e.split(":")); RESULT = Generator.salida(Generator.OBJETO, e, null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= AP Ids CP Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(Generator.CAST, i, e, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.salida(sym.MINUS, e, null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Incr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Operador 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= ALL NT$9 Lista_de_Sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TablaSimbolos.quitarNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
TablaSimbolos.anadirNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.salida(sym.PRINT, null, null, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= prFORTO 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= prFOR AP Expresion NT$6 PYC Condicion NT$7 PYC Expresion NT$8 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Generator.salida(Generator.LABEL, null, null, forr.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= prDO NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c.v()); Generator.salida(Generator.GOTO, null, null, doo.v()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              String RESULT =null;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, doo.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= prWHILE NT$2 AP Condicion NT$3 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, whilee); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, whilee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= prIF AP Condicion NT$0 CP Sentencia NT$1 prELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.salida(Generator.LABEL, null, null, iff);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, iff); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_Sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_Sent ::= Lista_de_Sent Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Lista_de_Sent ::= Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Lista_de_Sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

