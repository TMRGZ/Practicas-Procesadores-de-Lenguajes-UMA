package Feb2014;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 02 20:00:38 GMT 2019
//----------------------------------------------------

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.lr_parser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 02 20:00:38 GMT 2019
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\023\002" +
    "\000\002\024\002\000\002\003\012\000\002\025\002\000" +
    "\002\026\002\000\002\003\011\000\002\027\002\000\002" +
    "\030\002\000\002\003\013\000\002\031\002\000\002\032" +
    "\002\000\002\033\002\000\002\003\016\000\002\003\003" +
    "\000\002\003\007\000\002\034\002\000\002\003\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\010\005\000" +
    "\002\035\002\000\002\010\010\000\002\036\002\000\002" +
    "\010\006\000\002\010\003\000\002\011\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\004\000\002\037\002\000\002\016" +
    "\006\000\002\040\002\000\002\016\006\000\002\016\005" +
    "\000\002\041\002\000\002\042\002\000\002\014\013\000" +
    "\002\043\002\000\002\044\002\000\002\014\013\000\002" +
    "\015\004\000\002\015\002\000\002\021\003\000\002\022" +
    "\003\000\002\005\003\000\002\006\004\000\002\006\002" +
    "\000\002\020\003\000\002\017\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\216\000\036\002\ufffe\004\012\005\020\007\005\012" +
    "\017\014\014\016\026\017\006\020\016\022\027\023\024" +
    "\040\010\042\023\043\011\001\002\000\042\002\uffef\004" +
    "\uffef\005\uffef\007\uffef\012\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\040\uffef\042" +
    "\uffef\043\uffef\001\002\000\020\007\005\012\017\016\026" +
    "\017\006\040\010\042\023\043\011\001\002\000\060\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\024\uffe8" +
    "\026\216\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\001\002\000\004\012\205\001" +
    "\002\000\004\017\uffd9\001\002\000\020\007\005\012\017" +
    "\016\026\017\006\040\010\042\023\043\011\001\002\000" +
    "\004\012\uffb8\001\002\000\034\004\ufff6\005\ufff6\007\ufff6" +
    "\012\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6\023" +
    "\ufff6\040\ufff6\042\ufff6\043\ufff6\001\002\000\036\004\uffed" +
    "\005\uffed\007\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\022\uffed\023\uffed\040\uffed\042\uffed\043\uffed" +
    "\001\002\000\022\006\061\007\053\010\057\011\063\024" +
    "\170\042\067\043\065\044\056\001\002\000\004\012\uffbd" +
    "\001\002\000\020\007\005\012\017\016\026\017\006\040" +
    "\010\042\023\043\011\001\002\000\034\004\uffba\005\uffba" +
    "\007\uffba\012\uffba\014\uffba\016\uffba\017\uffba\020\uffba\022" +
    "\uffba\023\uffba\040\uffba\042\uffba\043\uffba\001\002\000\056" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\024" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\001\002\000\040\002\000\004\000" +
    "\005\000\007\000\012\000\014\000\015\000\016\000\017" +
    "\000\020\000\022\000\023\000\040\000\042\000\043\000" +
    "\001\002\000\020\007\005\012\017\016\026\017\006\040" +
    "\010\042\023\043\011\001\002\000\004\012\162\001\002" +
    "\000\036\002\160\004\012\005\020\007\005\012\017\014" +
    "\014\016\026\017\006\020\016\022\027\023\024\040\010" +
    "\042\023\043\011\001\002\000\056\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\013\uffe5\024\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\001\002\000\020\007\uffb9\012\uffb9\016\uffb9\017\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\001\002\000\020\007\005\012\123" +
    "\016\026\017\006\040\010\042\023\043\011\001\002\000" +
    "\004\017\110\001\002\000\004\012\ufff9\001\002\000\056" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\024" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\001\002\000\004\012\035\001\002" +
    "\000\022\007\005\012\041\016\026\017\006\027\037\040" +
    "\010\042\023\043\011\001\002\000\034\006\061\007\053" +
    "\010\057\011\063\032\064\033\055\034\070\035\062\036" +
    "\066\037\060\042\067\043\065\044\056\001\002\000\022" +
    "\007\005\012\041\016\026\017\006\027\037\040\010\042" +
    "\023\043\011\001\002\000\010\013\ufff8\030\044\031\045" +
    "\001\002\000\022\007\005\012\041\016\026\017\006\027" +
    "\037\040\010\042\023\043\011\001\002\000\036\006\061" +
    "\007\053\010\057\011\063\013\054\032\064\033\055\034" +
    "\070\035\062\036\066\037\060\042\067\043\065\044\056" +
    "\001\002\000\010\013\046\030\044\031\045\001\002\000" +
    "\022\007\uffcc\012\uffcc\016\uffcc\017\uffcc\027\uffcc\040\uffcc" +
    "\042\uffcc\043\uffcc\001\002\000\022\007\uffca\012\uffca\016" +
    "\uffca\017\uffca\027\uffca\040\uffca\042\uffca\043\uffca\001\002" +
    "\000\012\013\uffc8\024\uffc8\030\uffc8\031\uffc8\001\002\000" +
    "\022\007\005\012\041\016\026\017\006\027\037\040\010" +
    "\042\023\043\011\001\002\000\012\013\uffc9\024\uffc9\030" +
    "\044\031\uffc9\001\002\000\022\007\005\012\041\016\026" +
    "\017\006\027\037\040\010\042\023\043\011\001\002\000" +
    "\012\013\uffcb\024\uffcb\030\uffcb\031\uffcb\001\002\000\020" +
    "\007\005\012\017\016\026\017\006\040\010\042\023\043" +
    "\011\001\002\000\056\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\013\uffe9\024\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\001\002\000" +
    "\020\007\005\012\017\016\026\017\006\040\010\042\023" +
    "\043\011\001\002\000\020\007\005\012\017\016\026\017" +
    "\006\040\010\042\023\043\011\001\002\000\020\007\005" +
    "\012\017\016\026\017\006\040\010\042\023\043\011\001" +
    "\002\000\020\007\005\012\017\016\026\017\006\040\010" +
    "\042\023\043\011\001\002\000\020\007\005\012\017\016" +
    "\026\017\006\040\010\042\023\043\011\001\002\000\020" +
    "\007\005\012\017\016\026\017\006\040\010\042\023\043" +
    "\011\001\002\000\020\007\005\012\017\016\026\017\006" +
    "\040\010\042\023\043\011\001\002\000\020\007\005\012" +
    "\017\016\026\017\006\040\010\042\023\043\011\001\002" +
    "\000\056\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\024\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\001\002\000\020\007\005" +
    "\012\017\016\026\017\006\040\010\042\023\043\011\001" +
    "\002\000\056\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\013\uffe1\024\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\001\002\000\020\007" +
    "\005\012\017\016\026\017\006\040\010\042\023\043\011" +
    "\001\002\000\030\006\061\007\053\010\057\011\063\013" +
    "\uffd1\024\uffd1\030\uffd1\031\uffd1\042\067\043\065\044\056" +
    "\001\002\000\030\006\061\007\053\010\057\011\063\013" +
    "\uffd2\024\uffd2\030\uffd2\031\uffd2\042\067\043\065\044\056" +
    "\001\002\000\030\006\061\007\053\010\057\011\063\013" +
    "\uffcf\024\uffcf\030\uffcf\031\uffcf\042\067\043\065\044\056" +
    "\001\002\000\056\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\013\uffd5\024\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\042\067\043" +
    "\065\044\uffd5\045\uffd5\046\uffd5\047\uffd5\001\002\000\030" +
    "\006\061\007\053\010\057\011\063\013\uffd0\024\uffd0\030" +
    "\uffd0\031\uffd0\042\067\043\065\044\056\001\002\000\056" +
    "\005\uffd8\006\uffd8\007\uffd8\010\057\011\063\013\uffd8\024" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\041\uffd8\042\067\043\065\044\056\045" +
    "\uffd8\046\uffd8\047\uffd8\001\002\000\030\006\061\007\053" +
    "\010\057\011\063\013\uffd3\024\uffd3\030\uffd3\031\uffd3\042" +
    "\067\043\065\044\056\001\002\000\056\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\013\uffd6\024\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\041\uffd6\042\067\043\065\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\001\002\000\056\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\013\uffd4\024\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\067" +
    "\043\065\044\uffd4\045\uffd4\046\uffd4\047\uffd4\001\002\000" +
    "\030\006\061\007\053\010\057\011\063\013\uffce\024\uffce" +
    "\030\uffce\031\uffce\042\067\043\065\044\056\001\002\000" +
    "\056\005\uffd7\006\uffd7\007\uffd7\010\057\011\063\013\uffd7" +
    "\024\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\042\067\043\065\044\056" +
    "\045\uffd7\046\uffd7\047\uffd7\001\002\000\004\013\105\001" +
    "\002\000\034\004\012\005\020\007\005\012\017\014\014" +
    "\016\026\017\006\020\016\022\027\023\024\040\010\042" +
    "\023\043\011\001\002\000\042\002\ufff7\004\ufff7\005\ufff7" +
    "\007\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\040\ufff7\042\ufff7\043\ufff7" +
    "\001\002\000\012\013\uffcd\024\uffcd\030\uffcd\031\uffcd\001" +
    "\002\000\060\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\013\uffda\024\uffda\026\113\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\041\112\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\001\002\000" +
    "\056\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6" +
    "\024\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\001\002\000\004\017\uffdc\001" +
    "\002\000\020\007\005\012\017\016\026\017\006\040\010" +
    "\042\023\043\011\001\002\000\056\005\uffdf\006\061\007" +
    "\053\010\057\011\063\013\uffdf\024\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041" +
    "\115\042\067\043\065\044\056\045\uffdf\046\uffdf\047\uffdf" +
    "\001\002\000\004\017\uffde\001\002\000\004\017\110\001" +
    "\002\000\056\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\013\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\004\017" +
    "\110\001\002\000\056\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\013\uffdb\024\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\001\002\000" +
    "\024\006\061\007\053\010\057\011\063\042\067\043\065" +
    "\044\056\045\137\046\140\001\002\000\020\007\005\012" +
    "\017\016\026\017\006\040\010\042\023\043\011\001\002" +
    "\000\024\006\061\007\053\010\057\011\063\013\054\024" +
    "\ufff3\042\067\043\065\044\056\001\002\000\004\024\126" +
    "\001\002\000\022\007\005\012\041\016\026\017\006\027" +
    "\037\040\010\042\023\043\011\001\002\000\010\024\ufff2" +
    "\030\044\031\045\001\002\000\004\024\131\001\002\000" +
    "\020\007\005\012\017\016\026\017\006\040\010\042\023" +
    "\043\011\001\002\000\022\006\061\007\053\010\057\011" +
    "\063\013\ufff1\042\067\043\065\044\056\001\002\000\004" +
    "\013\134\001\002\000\034\004\012\005\020\007\005\012" +
    "\017\014\014\016\026\017\006\020\016\022\027\023\024" +
    "\040\010\042\023\043\011\001\002\000\042\002\ufff0\004" +
    "\ufff0\005\ufff0\007\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\001\002\000\020\007\005\012\017\016\026" +
    "\017\006\040\010\042\023\043\011\001\002\000\020\007" +
    "\uffbf\012\uffbf\016\uffbf\017\uffbf\040\uffbf\042\uffbf\043\uffbf" +
    "\001\002\000\020\007\uffbe\012\uffbe\016\uffbe\017\uffbe\040" +
    "\uffbe\042\uffbe\043\uffbe\001\002\000\020\007\005\012\017" +
    "\016\026\017\006\040\010\042\023\043\011\001\002\000" +
    "\024\005\uffc7\006\061\007\053\010\057\011\063\042\067" +
    "\043\065\044\056\047\uffc7\001\002\000\006\005\uffc0\047" +
    "\144\001\002\000\020\007\005\012\017\016\026\017\006" +
    "\040\010\042\023\043\011\001\002\000\004\005\146\001" +
    "\002\000\034\004\uffc6\005\uffc6\007\uffc6\012\uffc6\014\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\022\uffc6\023\uffc6\040\uffc6\042" +
    "\uffc6\043\uffc6\001\002\000\034\004\012\005\020\007\005" +
    "\012\017\014\014\016\026\017\006\020\016\022\027\023" +
    "\024\040\010\042\023\043\011\001\002\000\042\002\uffc5" +
    "\004\uffc5\005\uffc5\007\uffc5\012\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\040\uffc5" +
    "\042\uffc5\043\uffc5\001\002\000\022\005\uffc1\006\061\007" +
    "\053\010\057\011\063\042\067\043\065\044\056\001\002" +
    "\000\024\005\uffc4\006\061\007\053\010\057\011\063\042" +
    "\067\043\065\044\056\047\uffc4\001\002\000\006\005\uffc0" +
    "\047\144\001\002\000\004\005\155\001\002\000\034\004" +
    "\uffc3\005\uffc3\007\uffc3\012\uffc3\014\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\022\uffc3\023\uffc3\040\uffc3\042\uffc3\043\uffc3\001" +
    "\002\000\034\004\012\005\020\007\005\012\017\014\014" +
    "\016\026\017\006\020\016\022\027\023\024\040\010\042" +
    "\023\043\011\001\002\000\042\002\uffc2\004\uffc2\005\uffc2" +
    "\007\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\040\uffc2\042\uffc2\043\uffc2" +
    "\001\002\000\004\002\001\001\002\000\040\002\uffff\004" +
    "\uffff\005\uffff\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\022\uffff\023\uffff\040\uffff\042\uffff\043" +
    "\uffff\001\002\000\020\007\005\012\017\016\026\017\006" +
    "\040\010\042\023\043\011\001\002\000\022\006\061\007" +
    "\053\010\057\011\063\013\164\042\067\043\065\044\056" +
    "\001\002\000\004\024\165\001\002\000\042\002\uffee\004" +
    "\uffee\005\uffee\007\uffee\012\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\040\uffee\042" +
    "\uffee\043\uffee\001\002\000\056\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\013\uffe3\024\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\001" +
    "\002\000\022\006\061\007\053\010\057\011\063\013\054" +
    "\042\067\043\065\044\056\001\002\000\042\002\ufffd\004" +
    "\ufffd\005\ufffd\007\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\040\ufffd\042" +
    "\ufffd\043\ufffd\001\002\000\036\004\012\005\020\007\005" +
    "\012\017\014\014\015\ufffe\016\026\017\006\020\016\022" +
    "\027\023\024\040\010\042\023\043\011\001\002\000\036" +
    "\004\012\005\020\007\005\012\017\014\014\015\173\016" +
    "\026\017\006\020\016\022\027\023\024\040\010\042\023" +
    "\043\011\001\002\000\042\002\uffec\004\uffec\005\uffec\007" +
    "\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\040\uffec\042\uffec\043\uffec\001" +
    "\002\000\034\004\012\005\020\007\005\012\017\014\014" +
    "\016\026\017\006\020\016\022\027\023\024\040\010\042" +
    "\023\043\011\001\002\000\004\004\176\001\002\000\004" +
    "\012\177\001\002\000\022\007\005\012\041\016\026\017" +
    "\006\027\037\040\010\042\023\043\011\001\002\000\010" +
    "\013\201\030\044\031\045\001\002\000\004\024\ufff5\001" +
    "\002\000\004\024\203\001\002\000\042\002\ufff4\004\ufff4" +
    "\005\ufff4\007\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\040\ufff4\042\ufff4" +
    "\043\ufff4\001\002\000\056\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\013\uffe2\024\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\001\002" +
    "\000\022\007\005\012\041\016\026\017\006\027\037\040" +
    "\010\042\023\043\011\001\002\000\010\013\ufffc\030\044" +
    "\031\045\001\002\000\004\013\210\001\002\000\034\004" +
    "\012\005\020\007\005\012\017\014\014\016\026\017\006" +
    "\020\016\022\027\023\024\040\010\042\023\043\011\001" +
    "\002\000\042\002\ufffb\004\ufffb\005\ufffb\007\ufffb\012\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\040\ufffb\042\ufffb\043\ufffb\001\002\000\042" +
    "\002\uffbb\004\uffbb\005\uffbb\007\uffbb\012\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\213\022\uffbb\023\uffbb" +
    "\040\uffbb\042\uffbb\043\uffbb\001\002\000\034\004\012\005" +
    "\020\007\005\012\017\014\014\016\026\017\006\020\016" +
    "\022\027\023\024\040\010\042\023\043\011\001\002\000" +
    "\042\002\ufffa\004\ufffa\005\ufffa\007\ufffa\012\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\040\ufffa\042\ufffa\043\ufffa\001\002\000\042\002\uffbc" +
    "\004\uffbc\005\uffbc\007\uffbc\012\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\040\uffbc" +
    "\042\uffbc\043\uffbc\001\002\000\020\007\005\012\017\016" +
    "\026\017\006\040\010\042\023\043\011\001\002\000\056" +
    "\005\uffe7\006\061\007\053\010\057\011\063\013\uffe7\024" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\041\uffe7\042\067\043\065\044\056\045" +
    "\uffe7\046\uffe7\047\uffe7\001\002\000\056\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\013\uffe4\024\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\216\000\030\002\024\003\021\004\014\005\006\007" +
    "\031\011\030\012\032\013\020\014\003\017\027\020\012" +
    "\001\001\000\002\001\001\000\012\004\217\011\030\012" +
    "\032\013\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\203\011\030\012\032\013" +
    "\020\001\001\000\002\001\001\000\004\027\173\001\001" +
    "\000\004\034\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\166\011\030\012\032\013\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\165\011\030\012\032\013\020\001\001\000\002" +
    "\001\001\000\026\003\160\004\014\005\006\007\031\011" +
    "\030\012\032\013\020\014\003\017\027\020\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\121\011" +
    "\030\012\032\013\020\001\001\000\004\010\110\001\001" +
    "\000\004\025\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\035\011\030\012\032\013\020\016\037" +
    "\001\001\000\002\001\001\000\014\004\035\011\030\012" +
    "\032\013\020\016\106\001\001\000\004\026\103\001\001" +
    "\000\014\004\041\011\030\012\032\013\020\016\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\050" +
    "\001\001\000\004\040\046\001\001\000\002\001\001\000" +
    "\014\004\035\011\030\012\032\013\020\016\047\001\001" +
    "\000\002\001\001\000\014\004\035\011\030\012\032\013" +
    "\020\016\051\001\001\000\002\001\001\000\012\004\102" +
    "\011\030\012\032\013\020\001\001\000\002\001\001\000" +
    "\012\004\101\011\030\012\032\013\020\001\001\000\012" +
    "\004\100\011\030\012\032\013\020\001\001\000\012\004" +
    "\077\011\030\012\032\013\020\001\001\000\012\004\076" +
    "\011\030\012\032\013\020\001\001\000\012\004\075\011" +
    "\030\012\032\013\020\001\001\000\012\004\074\011\030" +
    "\012\032\013\020\001\001\000\012\004\073\011\030\012" +
    "\032\013\020\001\001\000\012\004\072\011\030\012\032" +
    "\013\020\001\001\000\002\001\001\000\012\004\071\011" +
    "\030\012\032\013\020\001\001\000\002\001\001\000\012" +
    "\004\070\011\030\012\032\013\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\105\004\014\005" +
    "\006\007\031\011\030\012\032\013\020\014\003\017\027" +
    "\020\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\117\001\001" +
    "\000\012\004\113\011\030\012\032\013\020\001\001\000" +
    "\002\001\001\000\004\035\115\001\001\000\004\010\116" +
    "\001\001\000\002\001\001\000\004\010\120\001\001\000" +
    "\002\001\001\000\006\021\140\022\135\001\001\000\012" +
    "\004\123\011\030\012\032\013\020\001\001\000\004\031" +
    "\124\001\001\000\002\001\001\000\014\004\035\011\030" +
    "\012\032\013\020\016\126\001\001\000\004\032\127\001" +
    "\001\000\002\001\001\000\012\004\131\011\030\012\032" +
    "\013\020\001\001\000\004\033\132\001\001\000\002\001" +
    "\001\000\026\003\134\004\014\005\006\007\031\011\030" +
    "\012\032\013\020\014\003\017\027\020\012\001\001\000" +
    "\002\001\001\000\012\004\151\011\030\012\032\013\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\141\011\030\012\032\013\020\001\001\000\004\041\142" +
    "\001\001\000\004\015\144\001\001\000\012\004\150\011" +
    "\030\012\032\013\020\001\001\000\002\001\001\000\004" +
    "\042\146\001\001\000\026\003\147\004\014\005\006\007" +
    "\031\011\030\012\032\013\020\014\003\017\027\020\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\152\001\001\000\004\015\153\001\001\000\002\001\001" +
    "\000\004\044\155\001\001\000\026\003\156\004\014\005" +
    "\006\007\031\011\030\012\032\013\020\014\003\017\027" +
    "\020\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\162\011\030\012\032\013\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\171\003\021\004\014\005\006\007\031\011" +
    "\030\012\032\013\020\014\003\017\027\020\012\001\001" +
    "\000\026\003\160\004\014\005\006\007\031\011\030\012" +
    "\032\013\020\014\003\017\027\020\012\001\001\000\002" +
    "\001\001\000\026\003\174\004\014\005\006\007\031\011" +
    "\030\012\032\013\020\014\003\017\027\020\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\035\011" +
    "\030\012\032\013\020\016\177\001\001\000\002\001\001" +
    "\000\004\030\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\035\011\030\012\032" +
    "\013\020\016\205\001\001\000\004\023\206\001\001\000" +
    "\002\001\001\000\026\003\210\004\014\005\006\007\031" +
    "\011\030\012\032\013\020\014\003\017\027\020\012\001" +
    "\001\000\004\024\211\001\001\000\004\006\213\001\001" +
    "\000\026\003\214\004\014\005\006\007\031\011\030\012" +
    "\032\013\020\014\003\017\027\020\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\216\011\030\012" +
    "\032\013\020\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prWHILE ::= WHILE
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWHILE",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prFOR ::= FOR
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFOR",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prDO ::= DO
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDO",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prELSE ::=
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prELSE ::= ELSE Sentencia
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // prIF ::= IF
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIF",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prDOWNTO ::= DOWNTO
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDOWNTO",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prTO ::= TO
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prTO",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prSTEP ::=
            {
              String RESULT =null;
		RESULT = "1";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSTEP",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prSTEP ::= STEP Expresion
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSTEP",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // prFORTO ::= prFOR Expresion prDOWNTO Expresion NT$16 prSTEP DO NT$17 Sentencia
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$17 ::=
            {
              String RESULT =(String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(sym.MENOS, e1 + TablaSimbolos.get(e1), s, e1 + TablaSimbolos.get(e1)); Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",34, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$16 ::=
            {
              String RESULT =null;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(Generator.IFGOTO, e1+" < ", e2, c.f()); Generator.salida(Generator.GOTO, null, null, c.v()); Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",33, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prFORTO ::= prFOR Expresion prTO Expresion NT$14 prSTEP DO NT$15 Sentencia
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFORTO",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$15 ::=
            {
              String RESULT =(String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(sym.MAS, e1 + TablaSimbolos.get(e1), s, e1 + TablaSimbolos.get(e1)); Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",32, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$14 ::=
            {
              String RESULT =null;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.v()); Generator.salida(Generator.IFGOTO, e2+" < ", e1, c.f()); Generator.salida(Generator.GOTO, null, null, c.v()); Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",31, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condicion ::= AP Condicion CP
            {
              DosEtiquetas RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Condicion ::= Condicion OR NT$13 Condicion
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (DosEtiquetas) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.v()); Generator.salida(Generator.GOTO, null, null, c2.v()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$13 ::=
            {
              DosEtiquetas RESULT =null;
		int c1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",30, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Condicion ::= Condicion AND NT$12 Condicion
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (DosEtiquetas) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.f()); Generator.salida(Generator.GOTO, null, null, c2.f()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$12 ::=
            {
              DosEtiquetas RESULT =null;
		int c1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",29, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Condicion ::= NOT Condicion
            {
              DosEtiquetas RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.peek()).value;
		c.swap(); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Condicion ::= Expresion GE Expresion
            {
              DosEtiquetas RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Condicion ::= Expresion GT Expresion
            {
              DosEtiquetas RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Condicion ::= Expresion LE Expresion
            {
              DosEtiquetas RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Condicion ::= Expresion LT Expresion
            {
              DosEtiquetas RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Condicion ::= Expresion NE Expresion
            {
              DosEtiquetas RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Condicion ::= Expresion EQ Expresion
            {
              DosEtiquetas RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Operador ::= Expresion MOD Expresion
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		String temp1 = Generator.nuevaTemp(); Generator.salida(sym.DIV, e1, e2, temp1); String temp2 = Generator.nuevaTemp(); Generator.salida(sym.POR, temp1, e2, temp2); temp1 = Generator.nuevaTemp(); Generator.salida(sym.MENOS, e1, temp2, temp1); RESULT = temp1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Operador ::= Expresion DIV Expresion
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.DIV, e1, e2, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Operador ::= Expresion POR Expresion
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.POR, e1, e2, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Operador ::= Expresion MENOS Expresion
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.MENOS, e1, e2, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Operador ::= Expresion MAS Expresion
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.MAS, e1, e2, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ids ::= INT
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Var ::= IDENT
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, null); RESULT = i + TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Var ::= IDENT COMA NT$11 Var
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::=
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Var ::= IDENT IGUAL Expresion COMA NT$10 Var
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::=
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, null); Generator.salida(sym.IDENT, e, null, i + TablaSimbolos.get(i)); RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",27, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Var ::= IDENT IGUAL Expresion
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, null); Generator.salida(sym.IDENT, e, null, i + TablaSimbolos.get(i)); RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Incr ::= Expresion MENOSMENOS
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.IDENT, TablaSimbolos.getConcat(e), null, RESULT); Generator.salida(sym.MENOSMENOS, null, null, TablaSimbolos.getConcat(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Incr ::= Expresion MASMAS
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.IDENT, TablaSimbolos.getConcat(e), null, RESULT); Generator.salida(sym.MASMAS, null, null, TablaSimbolos.getConcat(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Incr ::= MENOSMENOS Expresion
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = TablaSimbolos.getConcat(e); Generator.salida(sym.MENOSMENOS, null, null, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Incr ::= MASMAS Expresion
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = TablaSimbolos.getConcat(e); Generator.salida(sym.MASMAS, null, null, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= MENOS Expresion
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.MINUS, e, null, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= ENTERO
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= Ids Var
            {
              String RESULT =null;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= IDENT IGUAL Expresion
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = i + TablaSimbolos.get(i); Generator.salida(sym.IDENT, e, null, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= IDENT
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = i + TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= AP Expresion CP
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Incr
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Operador
            {
              String RESULT =null;
		int oleft = ((Symbol)CUP$parser$stack.peek()).left;
		int oright = ((Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= ALL NT$9 Lista_de_Sent CLL
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TablaSimbolos.quitarNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::=
            {
              String RESULT =null;
TablaSimbolos.anadirNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",26, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= PRINT AP Expresion CP PYC
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.salida(sym.PRINT, null, null, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= prFORTO
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= prFOR AP Expresion NT$6 PYC Condicion NT$7 PYC Expresion NT$8 CP Sentencia
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::=
            {
              String RESULT =(String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",25, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::=
            {
              String RESULT =(String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",24, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::=
            {
              String RESULT =null;
		int forrleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forrright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DosEtiquetas forr = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Generator.salida(Generator.LABEL, null, null, forr.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= prDO NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dooleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dooright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas doo = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::=
            {
              String RESULT =(String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dooright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas doo = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c.v()); Generator.salida(Generator.GOTO, null, null, doo.v()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::=
            {
              String RESULT =null;
		int dooleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dooright = ((Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas doo = (DosEtiquetas)((Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, doo.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= prWHILE NT$2 AP Condicion NT$3 CP Sentencia
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whilee = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, whilee); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::=
            {
              String RESULT =(String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String whilee = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::=
            {
              String RESULT =null;
		int whileeleft = ((Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((Symbol)CUP$parser$stack.peek()).right;
		String whilee = (String)((Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, whilee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= prIF AP Condicion NT$0 CP Sentencia NT$1 prELSE
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iffleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iffright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String iff = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.salida(Generator.LABEL, null, null, iff);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::=
            {
              String RESULT =(String) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iffleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iffright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String iff = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, iff); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::=
            {
              String RESULT =null;
		int iffleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iffright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iff = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PYC
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_Sent ::=
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_Sent ::= Lista_de_Sent Sentencia
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Lista_de_Sent ::= Sentencia
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Lista_de_Sent EOF
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

